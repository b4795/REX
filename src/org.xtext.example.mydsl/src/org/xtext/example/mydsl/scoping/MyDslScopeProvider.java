/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.example.mydsl.myDsl.InstanceIndirectRefPhrase;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallInRefsObjectsPhrase;
import org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallInRefsPhrase;
import org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallInRefsRefPhrase;
import org.xtext.example.mydsl.myDsl.OperationDefinitionBodyStmt;
import org.xtext.example.mydsl.myDsl.OperationDefinitionBodyVariableDeclarationPhrase;
import org.xtext.example.mydsl.myDsl.OperationDefinitionStmt;
import org.xtext.example.mydsl.myDsl.OperationParameterVariableDeclarationPhrase;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class MyDslScopeProvider extends AbstractMyDslScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
	    if (context instanceof OperationDefinitionBodyFunctionCallInRefsRefPhrase
	            && reference == MyDslPackage.Literals.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_REF_PHRASE__REF) {
	        EObject rootElement = EcoreUtil2.getRootContainer(context);
	        List<OperationDefinitionBodyFunctionCallInRefsPhrase> candidates =
	        	EcoreUtil2.getAllContentsOfType(rootElement, OperationDefinitionBodyFunctionCallInRefsPhrase.class);
	        candidates.removeIf(c -> !isVariableDeclarionInScope(context, c));
	        return Scopes.scopeFor(candidates);
	    }
	    else if (context instanceof InstanceIndirectRefPhrase
	            && reference == MyDslPackage.Literals.INSTANCE_INDIRECT_REF_PHRASE__PARENT) {
	        EObject rootElement = EcoreUtil2.getRootContainer(context);
	        List<OperationDefinitionBodyFunctionCallInRefsObjectsPhrase> candidates =
	        	EcoreUtil2.getAllContentsOfType(rootElement, OperationDefinitionBodyFunctionCallInRefsObjectsPhrase.class);
	        candidates.removeIf(c -> !isVariableDeclarionInScope(context, c));
	        return Scopes.scopeFor(candidates);
	    }
	    return super.getScope(context, reference);
	}
	
	private boolean isVariableDeclarionInScope(EObject context, EObject candidate) {
		if (candidate instanceof OperationParameterVariableDeclarationPhrase) {
			OperationDefinitionStmt contextOperationDefinitionStmt = EcoreUtil2.getContainerOfType(context, OperationDefinitionStmt.class);
			OperationDefinitionStmt candidateOperationDefinitionStmt = EcoreUtil2.getContainerOfType(candidate, OperationDefinitionStmt.class);
			return candidateOperationDefinitionStmt == contextOperationDefinitionStmt;
		}
		else if (candidate instanceof OperationDefinitionBodyVariableDeclarationPhrase) {
			OperationDefinitionBodyStmt contextOperationDefinitionBodyStmt = EcoreUtil2.getContainerOfType(context, OperationDefinitionBodyStmt.class);
			OperationDefinitionBodyStmt candidateOperationDefinitionBodyStmt = EcoreUtil2.getContainerOfType(candidate, OperationDefinitionBodyStmt.class);
			EObject candidateOperationDefinitionBodyStmtContainer = candidateOperationDefinitionBodyStmt.eContainer();
			
			// The context must live under the same roof as the candidate, and
			// the candidate must be older (an earlier sibling) than the context.
			EObject prevC = contextOperationDefinitionBodyStmt;
			for (EObject c : EcoreUtil2.getAllContainers(contextOperationDefinitionBodyStmt)) {
				if (candidateOperationDefinitionBodyStmtContainer == c) {
					for (EObject s : candidateOperationDefinitionBodyStmtContainer.eContents()) {
						if (s == candidateOperationDefinitionBodyStmt) {
							return true;
						}
						else if (s == prevC) {
							return false;
						}
					}
				}
				prevC = c;
			}
			return false;
		}
		return true;
	}
}
