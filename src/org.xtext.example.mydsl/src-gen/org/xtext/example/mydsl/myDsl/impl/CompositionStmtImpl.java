/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.myDsl.CompositionStmt;
import org.xtext.example.mydsl.myDsl.ExistenceAnyRefListPhrase;
import org.xtext.example.mydsl.myDsl.ExistenceSingularRefListPhrase;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Composition Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.CompositionStmtImpl#getParent <em>Parent</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.CompositionStmtImpl#getChildren <em>Children</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CompositionStmtImpl extends StmtImpl implements CompositionStmt
{
  /**
   * The cached value of the '{@link #getParent() <em>Parent</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParent()
   * @generated
   * @ordered
   */
  protected ExistenceSingularRefListPhrase parent;

  /**
   * The cached value of the '{@link #getChildren() <em>Children</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildren()
   * @generated
   * @ordered
   */
  protected ExistenceAnyRefListPhrase children;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositionStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.COMPOSITION_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistenceSingularRefListPhrase getParent()
  {
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParent(ExistenceSingularRefListPhrase newParent, NotificationChain msgs)
  {
    ExistenceSingularRefListPhrase oldParent = parent;
    parent = newParent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPOSITION_STMT__PARENT, oldParent, newParent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParent(ExistenceSingularRefListPhrase newParent)
  {
    if (newParent != parent)
    {
      NotificationChain msgs = null;
      if (parent != null)
        msgs = ((InternalEObject)parent).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPOSITION_STMT__PARENT, null, msgs);
      if (newParent != null)
        msgs = ((InternalEObject)newParent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPOSITION_STMT__PARENT, null, msgs);
      msgs = basicSetParent(newParent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPOSITION_STMT__PARENT, newParent, newParent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistenceAnyRefListPhrase getChildren()
  {
    return children;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChildren(ExistenceAnyRefListPhrase newChildren, NotificationChain msgs)
  {
    ExistenceAnyRefListPhrase oldChildren = children;
    children = newChildren;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPOSITION_STMT__CHILDREN, oldChildren, newChildren);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChildren(ExistenceAnyRefListPhrase newChildren)
  {
    if (newChildren != children)
    {
      NotificationChain msgs = null;
      if (children != null)
        msgs = ((InternalEObject)children).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPOSITION_STMT__CHILDREN, null, msgs);
      if (newChildren != null)
        msgs = ((InternalEObject)newChildren).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPOSITION_STMT__CHILDREN, null, msgs);
      msgs = basicSetChildren(newChildren, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPOSITION_STMT__CHILDREN, newChildren, newChildren));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPOSITION_STMT__PARENT:
        return basicSetParent(null, msgs);
      case MyDslPackage.COMPOSITION_STMT__CHILDREN:
        return basicSetChildren(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPOSITION_STMT__PARENT:
        return getParent();
      case MyDslPackage.COMPOSITION_STMT__CHILDREN:
        return getChildren();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPOSITION_STMT__PARENT:
        setParent((ExistenceSingularRefListPhrase)newValue);
        return;
      case MyDslPackage.COMPOSITION_STMT__CHILDREN:
        setChildren((ExistenceAnyRefListPhrase)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPOSITION_STMT__PARENT:
        setParent((ExistenceSingularRefListPhrase)null);
        return;
      case MyDslPackage.COMPOSITION_STMT__CHILDREN:
        setChildren((ExistenceAnyRefListPhrase)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPOSITION_STMT__PARENT:
        return parent != null;
      case MyDslPackage.COMPOSITION_STMT__CHILDREN:
        return children != null;
    }
    return super.eIsSet(featureID);
  }

} //CompositionStmtImpl
