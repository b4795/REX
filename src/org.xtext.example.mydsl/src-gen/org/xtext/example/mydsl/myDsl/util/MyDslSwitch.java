/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.myDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myDsl.MyDslPackage
 * @generated
 */
public class MyDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyDslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STMT:
      {
        Stmt stmt = (Stmt)theEObject;
        T result = caseStmt(stmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_STMT:
      {
        ExistenceStmt existenceStmt = (ExistenceStmt)theEObject;
        T result = caseExistenceStmt(existenceStmt);
        if (result == null) result = caseStmt(existenceStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_DEFINITE_STMT:
      {
        ExistenceDefiniteStmt existenceDefiniteStmt = (ExistenceDefiniteStmt)theEObject;
        T result = caseExistenceDefiniteStmt(existenceDefiniteStmt);
        if (result == null) result = caseExistenceStmt(existenceDefiniteStmt);
        if (result == null) result = caseStmt(existenceDefiniteStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_DEFINITE_PHRASE:
      {
        ExistenceDefinitePhrase existenceDefinitePhrase = (ExistenceDefinitePhrase)theEObject;
        T result = caseExistenceDefinitePhrase(existenceDefinitePhrase);
        if (result == null) result = caseExistenceAnyPhrase(existenceDefinitePhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_DEFINITE_REF_PHRASE:
      {
        ExistenceDefiniteRefPhrase existenceDefiniteRefPhrase = (ExistenceDefiniteRefPhrase)theEObject;
        T result = caseExistenceDefiniteRefPhrase(existenceDefiniteRefPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_DEFINITE_REF_LIST_PHRASE:
      {
        ExistenceDefiniteRefListPhrase existenceDefiniteRefListPhrase = (ExistenceDefiniteRefListPhrase)theEObject;
        T result = caseExistenceDefiniteRefListPhrase(existenceDefiniteRefListPhrase);
        if (result == null) result = caseExistenceSingularRefListPhrase(existenceDefiniteRefListPhrase);
        if (result == null) result = caseExistenceAnyRefListPhrase(existenceDefiniteRefListPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_INDEFINITE_STMT:
      {
        ExistenceIndefiniteStmt existenceIndefiniteStmt = (ExistenceIndefiniteStmt)theEObject;
        T result = caseExistenceIndefiniteStmt(existenceIndefiniteStmt);
        if (result == null) result = caseExistenceStmt(existenceIndefiniteStmt);
        if (result == null) result = caseStmt(existenceIndefiniteStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_SINGULAR_INDEFINITE_PHRASE:
      {
        ExistenceSingularIndefinitePhrase existenceSingularIndefinitePhrase = (ExistenceSingularIndefinitePhrase)theEObject;
        T result = caseExistenceSingularIndefinitePhrase(existenceSingularIndefinitePhrase);
        if (result == null) result = caseExistenceAnyPhrase(existenceSingularIndefinitePhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_PLURAL_INDEFINITE_PHRASE:
      {
        ExistencePluralIndefinitePhrase existencePluralIndefinitePhrase = (ExistencePluralIndefinitePhrase)theEObject;
        T result = caseExistencePluralIndefinitePhrase(existencePluralIndefinitePhrase);
        if (result == null) result = caseExistenceAnyPhrase(existencePluralIndefinitePhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_SINGULAR_INDEFINITE_REF_PHRASE:
      {
        ExistenceSingularIndefiniteRefPhrase existenceSingularIndefiniteRefPhrase = (ExistenceSingularIndefiniteRefPhrase)theEObject;
        T result = caseExistenceSingularIndefiniteRefPhrase(existenceSingularIndefiniteRefPhrase);
        if (result == null) result = caseExistenceIndefiniteRefPhrase(existenceSingularIndefiniteRefPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_PLURAL_INDEFINITE_REF_PHRASE:
      {
        ExistencePluralIndefiniteRefPhrase existencePluralIndefiniteRefPhrase = (ExistencePluralIndefiniteRefPhrase)theEObject;
        T result = caseExistencePluralIndefiniteRefPhrase(existencePluralIndefiniteRefPhrase);
        if (result == null) result = caseExistenceIndefiniteRefPhrase(existencePluralIndefiniteRefPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_SINGULAR_INDEFINITE_REF_LIST_PHRASE:
      {
        ExistenceSingularIndefiniteRefListPhrase existenceSingularIndefiniteRefListPhrase = (ExistenceSingularIndefiniteRefListPhrase)theEObject;
        T result = caseExistenceSingularIndefiniteRefListPhrase(existenceSingularIndefiniteRefListPhrase);
        if (result == null) result = caseExistenceSingularRefListPhrase(existenceSingularIndefiniteRefListPhrase);
        if (result == null) result = caseExistenceAnyRefListPhrase(existenceSingularIndefiniteRefListPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_PLURAL_INDEFINITE_REF_LIST_PHRASE:
      {
        ExistencePluralIndefiniteRefListPhrase existencePluralIndefiniteRefListPhrase = (ExistencePluralIndefiniteRefListPhrase)theEObject;
        T result = caseExistencePluralIndefiniteRefListPhrase(existencePluralIndefiniteRefListPhrase);
        if (result == null) result = caseExistenceAnyRefListPhrase(existencePluralIndefiniteRefListPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_SINGULAR_REF_LIST_PHRASE:
      {
        ExistenceSingularRefListPhrase existenceSingularRefListPhrase = (ExistenceSingularRefListPhrase)theEObject;
        T result = caseExistenceSingularRefListPhrase(existenceSingularRefListPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_ANY_REF_LIST_PHRASE:
      {
        ExistenceAnyRefListPhrase existenceAnyRefListPhrase = (ExistenceAnyRefListPhrase)theEObject;
        T result = caseExistenceAnyRefListPhrase(existenceAnyRefListPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_INDEFINITE_REF_PHRASE:
      {
        ExistenceIndefiniteRefPhrase existenceIndefiniteRefPhrase = (ExistenceIndefiniteRefPhrase)theEObject;
        T result = caseExistenceIndefiniteRefPhrase(existenceIndefiniteRefPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXISTENCE_ANY_PHRASE:
      {
        ExistenceAnyPhrase existenceAnyPhrase = (ExistenceAnyPhrase)theEObject;
        T result = caseExistenceAnyPhrase(existenceAnyPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPOSITION_STMT:
      {
        CompositionStmt compositionStmt = (CompositionStmt)theEObject;
        T result = caseCompositionStmt(compositionStmt);
        if (result == null) result = caseStmt(compositionStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INHERITANCE_STMT:
      {
        InheritanceStmt inheritanceStmt = (InheritanceStmt)theEObject;
        T result = caseInheritanceStmt(inheritanceStmt);
        if (result == null) result = caseStmt(inheritanceStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_STMT:
      {
        OperationStmt operationStmt = (OperationStmt)theEObject;
        T result = caseOperationStmt(operationStmt);
        if (result == null) result = caseStmt(operationStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DECLARATION_STMT:
      {
        OperationDeclarationStmt operationDeclarationStmt = (OperationDeclarationStmt)theEObject;
        T result = caseOperationDeclarationStmt(operationDeclarationStmt);
        if (result == null) result = caseOperationStmt(operationDeclarationStmt);
        if (result == null) result = caseStmt(operationDeclarationStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DECLARION_HEADER_STMT:
      {
        OperationDeclarionHeaderStmt operationDeclarionHeaderStmt = (OperationDeclarionHeaderStmt)theEObject;
        T result = caseOperationDeclarionHeaderStmt(operationDeclarionHeaderStmt);
        if (result == null) result = caseOperationDeclarationStmt(operationDeclarionHeaderStmt);
        if (result == null) result = caseOperationStmt(operationDeclarionHeaderStmt);
        if (result == null) result = caseStmt(operationDeclarionHeaderStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_PARAMETER_PHRASE:
      {
        OperationParameterPhrase operationParameterPhrase = (OperationParameterPhrase)theEObject;
        T result = caseOperationParameterPhrase(operationParameterPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_STMT:
      {
        OperationDefinitionStmt operationDefinitionStmt = (OperationDefinitionStmt)theEObject;
        T result = caseOperationDefinitionStmt(operationDefinitionStmt);
        if (result == null) result = caseOperationStmt(operationDefinitionStmt);
        if (result == null) result = caseStmt(operationDefinitionStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_BODY_STMTS:
      {
        OperationDefinitionBodyStmts operationDefinitionBodyStmts = (OperationDefinitionBodyStmts)theEObject;
        T result = caseOperationDefinitionBodyStmts(operationDefinitionBodyStmts);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_BODY_STMT:
      {
        OperationDefinitionBodyStmt operationDefinitionBodyStmt = (OperationDefinitionBodyStmt)theEObject;
        T result = caseOperationDefinitionBodyStmt(operationDefinitionBodyStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_BODY_UNCONDITIONAL_STMT:
      {
        OperationDefinitionBodyUnconditionalStmt operationDefinitionBodyUnconditionalStmt = (OperationDefinitionBodyUnconditionalStmt)theEObject;
        T result = caseOperationDefinitionBodyUnconditionalStmt(operationDefinitionBodyUnconditionalStmt);
        if (result == null) result = caseOperationDefinitionBodyStmt(operationDefinitionBodyUnconditionalStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_BODY_UNCONDITIONAL_PHRASE:
      {
        OperationDefinitionBodyUnconditionalPhrase operationDefinitionBodyUnconditionalPhrase = (OperationDefinitionBodyUnconditionalPhrase)theEObject;
        T result = caseOperationDefinitionBodyUnconditionalPhrase(operationDefinitionBodyUnconditionalPhrase);
        if (result == null) result = caseOperationDefinitionBodyUnconditionalStmt(operationDefinitionBodyUnconditionalPhrase);
        if (result == null) result = caseOperationDefinitionBodyStmt(operationDefinitionBodyUnconditionalPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_BODY_FUNCTION_CALL_PHRASE:
      {
        OperationDefinitionBodyFunctionCallPhrase operationDefinitionBodyFunctionCallPhrase = (OperationDefinitionBodyFunctionCallPhrase)theEObject;
        T result = caseOperationDefinitionBodyFunctionCallPhrase(operationDefinitionBodyFunctionCallPhrase);
        if (result == null) result = caseOperationDefinitionBodyUnconditionalPhrase(operationDefinitionBodyFunctionCallPhrase);
        if (result == null) result = caseOperationDefinitionBodyUnconditionalStmt(operationDefinitionBodyFunctionCallPhrase);
        if (result == null) result = caseOperationDefinitionBodyStmt(operationDefinitionBodyFunctionCallPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_BODY_FUNCTION_CALL_ARGUMENTS_PHRASE:
      {
        OperationDefinitionBodyFunctionCallArgumentsPhrase operationDefinitionBodyFunctionCallArgumentsPhrase = (OperationDefinitionBodyFunctionCallArgumentsPhrase)theEObject;
        T result = caseOperationDefinitionBodyFunctionCallArgumentsPhrase(operationDefinitionBodyFunctionCallArgumentsPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_REF_PHRASE:
      {
        OperationDefinitionBodyFunctionCallInRefsRefPhrase operationDefinitionBodyFunctionCallInRefsRefPhrase = (OperationDefinitionBodyFunctionCallInRefsRefPhrase)theEObject;
        T result = caseOperationDefinitionBodyFunctionCallInRefsRefPhrase(operationDefinitionBodyFunctionCallInRefsRefPhrase);
        if (result == null) result = caseOperationDefinitionBodyFunctionCallArgumentsPhrase(operationDefinitionBodyFunctionCallInRefsRefPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_PHRASE:
      {
        OperationDefinitionBodyFunctionCallInRefsPhrase operationDefinitionBodyFunctionCallInRefsPhrase = (OperationDefinitionBodyFunctionCallInRefsPhrase)theEObject;
        T result = caseOperationDefinitionBodyFunctionCallInRefsPhrase(operationDefinitionBodyFunctionCallInRefsPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_OBJECTS_PHRASE:
      {
        OperationDefinitionBodyFunctionCallInRefsObjectsPhrase operationDefinitionBodyFunctionCallInRefsObjectsPhrase = (OperationDefinitionBodyFunctionCallInRefsObjectsPhrase)theEObject;
        T result = caseOperationDefinitionBodyFunctionCallInRefsObjectsPhrase(operationDefinitionBodyFunctionCallInRefsObjectsPhrase);
        if (result == null) result = caseOperationDefinitionBodyFunctionCallInRefsPhrase(operationDefinitionBodyFunctionCallInRefsObjectsPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_BODY_VARIABLE_DECLARATION_PHRASE:
      {
        OperationDefinitionBodyVariableDeclarationPhrase operationDefinitionBodyVariableDeclarationPhrase = (OperationDefinitionBodyVariableDeclarationPhrase)theEObject;
        T result = caseOperationDefinitionBodyVariableDeclarationPhrase(operationDefinitionBodyVariableDeclarationPhrase);
        if (result == null) result = caseOperationDefinitionBodyUnconditionalPhrase(operationDefinitionBodyVariableDeclarationPhrase);
        if (result == null) result = caseOperationDefinitionBodyFunctionCallInRefsObjectsPhrase(operationDefinitionBodyVariableDeclarationPhrase);
        if (result == null) result = caseOperationDefinitionBodyUnconditionalStmt(operationDefinitionBodyVariableDeclarationPhrase);
        if (result == null) result = caseOperationDefinitionBodyFunctionCallInRefsPhrase(operationDefinitionBodyVariableDeclarationPhrase);
        if (result == null) result = caseOperationDefinitionBodyStmt(operationDefinitionBodyVariableDeclarationPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_DEFINITION_BODY_CONDITIONAL_STMT:
      {
        OperationDefinitionBodyConditionalStmt operationDefinitionBodyConditionalStmt = (OperationDefinitionBodyConditionalStmt)theEObject;
        T result = caseOperationDefinitionBodyConditionalStmt(operationDefinitionBodyConditionalStmt);
        if (result == null) result = caseOperationDefinitionBodyStmt(operationDefinitionBodyConditionalStmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_PARAMETER_VARIABLE_DECLARATION_PHRASE:
      {
        OperationParameterVariableDeclarationPhrase operationParameterVariableDeclarationPhrase = (OperationParameterVariableDeclarationPhrase)theEObject;
        T result = caseOperationParameterVariableDeclarationPhrase(operationParameterVariableDeclarationPhrase);
        if (result == null) result = caseOperationParameterPhrase(operationParameterVariableDeclarationPhrase);
        if (result == null) result = caseOperationDefinitionBodyFunctionCallInRefsObjectsPhrase(operationParameterVariableDeclarationPhrase);
        if (result == null) result = caseOperationDefinitionBodyFunctionCallInRefsPhrase(operationParameterVariableDeclarationPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_PARAMETER_CONNECTION_PHRASE:
      {
        OperationParameterConnectionPhrase operationParameterConnectionPhrase = (OperationParameterConnectionPhrase)theEObject;
        T result = caseOperationParameterConnectionPhrase(operationParameterConnectionPhrase);
        if (result == null) result = caseOperationParameterPhrase(operationParameterConnectionPhrase);
        if (result == null) result = caseOperationDefinitionBodyFunctionCallInRefsPhrase(operationParameterConnectionPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION_PARAMETER_CONNECTION_BUILTIN_REF_PHRASE:
      {
        OperationParameterConnectionBuiltinRefPhrase operationParameterConnectionBuiltinRefPhrase = (OperationParameterConnectionBuiltinRefPhrase)theEObject;
        T result = caseOperationParameterConnectionBuiltinRefPhrase(operationParameterConnectionBuiltinRefPhrase);
        if (result == null) result = caseOperationDefinitionBodyFunctionCallArgumentsPhrase(operationParameterConnectionBuiltinRefPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INSTANCE_REF_PHRASE:
      {
        InstanceRefPhrase instanceRefPhrase = (InstanceRefPhrase)theEObject;
        T result = caseInstanceRefPhrase(instanceRefPhrase);
        if (result == null) result = caseOperationDefinitionBodyFunctionCallArgumentsPhrase(instanceRefPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INSTANCE_DIRECT_REF_PHRASE:
      {
        InstanceDirectRefPhrase instanceDirectRefPhrase = (InstanceDirectRefPhrase)theEObject;
        T result = caseInstanceDirectRefPhrase(instanceDirectRefPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INSTANCE_INDIRECT_REF_PHRASE:
      {
        InstanceIndirectRefPhrase instanceIndirectRefPhrase = (InstanceIndirectRefPhrase)theEObject;
        T result = caseInstanceIndirectRefPhrase(instanceIndirectRefPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INSTANCE_BUILTIN_VALUE_PHRASE:
      {
        InstanceBuiltinValuePhrase instanceBuiltinValuePhrase = (InstanceBuiltinValuePhrase)theEObject;
        T result = caseInstanceBuiltinValuePhrase(instanceBuiltinValuePhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INSTANCE_BUILTIN_VALUE_INTEGER_PHRASE:
      {
        InstanceBuiltinValueIntegerPhrase instanceBuiltinValueIntegerPhrase = (InstanceBuiltinValueIntegerPhrase)theEObject;
        T result = caseInstanceBuiltinValueIntegerPhrase(instanceBuiltinValueIntegerPhrase);
        if (result == null) result = caseInstanceBuiltinValuePhrase(instanceBuiltinValueIntegerPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INSTANCE_BUILTIN_VALUE_STRING_PHRASE:
      {
        InstanceBuiltinValueStringPhrase instanceBuiltinValueStringPhrase = (InstanceBuiltinValueStringPhrase)theEObject;
        T result = caseInstanceBuiltinValueStringPhrase(instanceBuiltinValueStringPhrase);
        if (result == null) result = caseInstanceBuiltinValuePhrase(instanceBuiltinValueStringPhrase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStmt(Stmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceStmt(ExistenceStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Definite Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Definite Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceDefiniteStmt(ExistenceDefiniteStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Definite Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Definite Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceDefinitePhrase(ExistenceDefinitePhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Definite Ref Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Definite Ref Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceDefiniteRefPhrase(ExistenceDefiniteRefPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Definite Ref List Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Definite Ref List Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceDefiniteRefListPhrase(ExistenceDefiniteRefListPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Indefinite Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Indefinite Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceIndefiniteStmt(ExistenceIndefiniteStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Singular Indefinite Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Singular Indefinite Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceSingularIndefinitePhrase(ExistenceSingularIndefinitePhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Plural Indefinite Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Plural Indefinite Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistencePluralIndefinitePhrase(ExistencePluralIndefinitePhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Singular Indefinite Ref Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Singular Indefinite Ref Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceSingularIndefiniteRefPhrase(ExistenceSingularIndefiniteRefPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Plural Indefinite Ref Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Plural Indefinite Ref Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistencePluralIndefiniteRefPhrase(ExistencePluralIndefiniteRefPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Singular Indefinite Ref List Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Singular Indefinite Ref List Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceSingularIndefiniteRefListPhrase(ExistenceSingularIndefiniteRefListPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Plural Indefinite Ref List Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Plural Indefinite Ref List Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistencePluralIndefiniteRefListPhrase(ExistencePluralIndefiniteRefListPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Singular Ref List Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Singular Ref List Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceSingularRefListPhrase(ExistenceSingularRefListPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Any Ref List Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Any Ref List Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceAnyRefListPhrase(ExistenceAnyRefListPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Indefinite Ref Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Indefinite Ref Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceIndefiniteRefPhrase(ExistenceIndefiniteRefPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence Any Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence Any Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistenceAnyPhrase(ExistenceAnyPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composition Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composition Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositionStmt(CompositionStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inheritance Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inheritance Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInheritanceStmt(InheritanceStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationStmt(OperationStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Declaration Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Declaration Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDeclarationStmt(OperationDeclarationStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Declarion Header Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Declarion Header Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDeclarionHeaderStmt(OperationDeclarionHeaderStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Parameter Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Parameter Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationParameterPhrase(OperationParameterPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionStmt(OperationDefinitionStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Body Stmts</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Body Stmts</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionBodyStmts(OperationDefinitionBodyStmts object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Body Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Body Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionBodyStmt(OperationDefinitionBodyStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Body Unconditional Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Body Unconditional Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionBodyUnconditionalStmt(OperationDefinitionBodyUnconditionalStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Body Unconditional Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Body Unconditional Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionBodyUnconditionalPhrase(OperationDefinitionBodyUnconditionalPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Body Function Call Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Body Function Call Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionBodyFunctionCallPhrase(OperationDefinitionBodyFunctionCallPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Body Function Call Arguments Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Body Function Call Arguments Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionBodyFunctionCallArgumentsPhrase(OperationDefinitionBodyFunctionCallArgumentsPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Body Function Call In Refs Ref Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Body Function Call In Refs Ref Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionBodyFunctionCallInRefsRefPhrase(OperationDefinitionBodyFunctionCallInRefsRefPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Body Function Call In Refs Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Body Function Call In Refs Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionBodyFunctionCallInRefsPhrase(OperationDefinitionBodyFunctionCallInRefsPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Body Function Call In Refs Objects Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Body Function Call In Refs Objects Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionBodyFunctionCallInRefsObjectsPhrase(OperationDefinitionBodyFunctionCallInRefsObjectsPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Body Variable Declaration Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Body Variable Declaration Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionBodyVariableDeclarationPhrase(OperationDefinitionBodyVariableDeclarationPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Definition Body Conditional Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Definition Body Conditional Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDefinitionBodyConditionalStmt(OperationDefinitionBodyConditionalStmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Parameter Variable Declaration Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Parameter Variable Declaration Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationParameterVariableDeclarationPhrase(OperationParameterVariableDeclarationPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Parameter Connection Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Parameter Connection Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationParameterConnectionPhrase(OperationParameterConnectionPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Parameter Connection Builtin Ref Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Parameter Connection Builtin Ref Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationParameterConnectionBuiltinRefPhrase(OperationParameterConnectionBuiltinRefPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instance Ref Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instance Ref Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstanceRefPhrase(InstanceRefPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instance Direct Ref Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instance Direct Ref Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstanceDirectRefPhrase(InstanceDirectRefPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instance Indirect Ref Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instance Indirect Ref Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstanceIndirectRefPhrase(InstanceIndirectRefPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instance Builtin Value Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instance Builtin Value Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstanceBuiltinValuePhrase(InstanceBuiltinValuePhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instance Builtin Value Integer Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instance Builtin Value Integer Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstanceBuiltinValueIntegerPhrase(InstanceBuiltinValueIntegerPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instance Builtin Value String Phrase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instance Builtin Value String Phrase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstanceBuiltinValueStringPhrase(InstanceBuiltinValueStringPhrase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyDslSwitch
