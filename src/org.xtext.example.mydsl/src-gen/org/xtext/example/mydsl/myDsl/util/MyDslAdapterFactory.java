/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.myDsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.example.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myDsl.MyDslPackage
 * @generated
 */
public class MyDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyDslSwitch<Adapter> modelSwitch =
    new MyDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseStmt(Stmt object)
      {
        return createStmtAdapter();
      }
      @Override
      public Adapter caseExistenceStmt(ExistenceStmt object)
      {
        return createExistenceStmtAdapter();
      }
      @Override
      public Adapter caseExistenceDefiniteStmt(ExistenceDefiniteStmt object)
      {
        return createExistenceDefiniteStmtAdapter();
      }
      @Override
      public Adapter caseExistenceDefinitePhrase(ExistenceDefinitePhrase object)
      {
        return createExistenceDefinitePhraseAdapter();
      }
      @Override
      public Adapter caseExistenceDefiniteRefPhrase(ExistenceDefiniteRefPhrase object)
      {
        return createExistenceDefiniteRefPhraseAdapter();
      }
      @Override
      public Adapter caseExistenceDefiniteRefListPhrase(ExistenceDefiniteRefListPhrase object)
      {
        return createExistenceDefiniteRefListPhraseAdapter();
      }
      @Override
      public Adapter caseExistenceIndefiniteStmt(ExistenceIndefiniteStmt object)
      {
        return createExistenceIndefiniteStmtAdapter();
      }
      @Override
      public Adapter caseExistenceSingularIndefinitePhrase(ExistenceSingularIndefinitePhrase object)
      {
        return createExistenceSingularIndefinitePhraseAdapter();
      }
      @Override
      public Adapter caseExistencePluralIndefinitePhrase(ExistencePluralIndefinitePhrase object)
      {
        return createExistencePluralIndefinitePhraseAdapter();
      }
      @Override
      public Adapter caseExistenceSingularIndefiniteRefPhrase(ExistenceSingularIndefiniteRefPhrase object)
      {
        return createExistenceSingularIndefiniteRefPhraseAdapter();
      }
      @Override
      public Adapter caseExistencePluralIndefiniteRefPhrase(ExistencePluralIndefiniteRefPhrase object)
      {
        return createExistencePluralIndefiniteRefPhraseAdapter();
      }
      @Override
      public Adapter caseExistenceSingularIndefiniteRefListPhrase(ExistenceSingularIndefiniteRefListPhrase object)
      {
        return createExistenceSingularIndefiniteRefListPhraseAdapter();
      }
      @Override
      public Adapter caseExistencePluralIndefiniteRefListPhrase(ExistencePluralIndefiniteRefListPhrase object)
      {
        return createExistencePluralIndefiniteRefListPhraseAdapter();
      }
      @Override
      public Adapter caseExistenceSingularRefListPhrase(ExistenceSingularRefListPhrase object)
      {
        return createExistenceSingularRefListPhraseAdapter();
      }
      @Override
      public Adapter caseExistenceAnyRefListPhrase(ExistenceAnyRefListPhrase object)
      {
        return createExistenceAnyRefListPhraseAdapter();
      }
      @Override
      public Adapter caseExistenceIndefiniteRefPhrase(ExistenceIndefiniteRefPhrase object)
      {
        return createExistenceIndefiniteRefPhraseAdapter();
      }
      @Override
      public Adapter caseExistenceAnyPhrase(ExistenceAnyPhrase object)
      {
        return createExistenceAnyPhraseAdapter();
      }
      @Override
      public Adapter caseCompositionStmt(CompositionStmt object)
      {
        return createCompositionStmtAdapter();
      }
      @Override
      public Adapter caseInheritanceStmt(InheritanceStmt object)
      {
        return createInheritanceStmtAdapter();
      }
      @Override
      public Adapter caseOperationStmt(OperationStmt object)
      {
        return createOperationStmtAdapter();
      }
      @Override
      public Adapter caseOperationDeclarationStmt(OperationDeclarationStmt object)
      {
        return createOperationDeclarationStmtAdapter();
      }
      @Override
      public Adapter caseOperationDeclarionHeaderStmt(OperationDeclarionHeaderStmt object)
      {
        return createOperationDeclarionHeaderStmtAdapter();
      }
      @Override
      public Adapter caseOperationParameterPhrase(OperationParameterPhrase object)
      {
        return createOperationParameterPhraseAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionStmt(OperationDefinitionStmt object)
      {
        return createOperationDefinitionStmtAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionBodyStmts(OperationDefinitionBodyStmts object)
      {
        return createOperationDefinitionBodyStmtsAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionBodyStmt(OperationDefinitionBodyStmt object)
      {
        return createOperationDefinitionBodyStmtAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionBodyUnconditionalStmt(OperationDefinitionBodyUnconditionalStmt object)
      {
        return createOperationDefinitionBodyUnconditionalStmtAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionBodyUnconditionalPhrase(OperationDefinitionBodyUnconditionalPhrase object)
      {
        return createOperationDefinitionBodyUnconditionalPhraseAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionBodyFunctionCallPhrase(OperationDefinitionBodyFunctionCallPhrase object)
      {
        return createOperationDefinitionBodyFunctionCallPhraseAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionBodyFunctionCallArgumentsPhrase(OperationDefinitionBodyFunctionCallArgumentsPhrase object)
      {
        return createOperationDefinitionBodyFunctionCallArgumentsPhraseAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionBodyFunctionCallInRefsRefPhrase(OperationDefinitionBodyFunctionCallInRefsRefPhrase object)
      {
        return createOperationDefinitionBodyFunctionCallInRefsRefPhraseAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionBodyFunctionCallInRefsPhrase(OperationDefinitionBodyFunctionCallInRefsPhrase object)
      {
        return createOperationDefinitionBodyFunctionCallInRefsPhraseAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionBodyFunctionCallInRefsObjectsPhrase(OperationDefinitionBodyFunctionCallInRefsObjectsPhrase object)
      {
        return createOperationDefinitionBodyFunctionCallInRefsObjectsPhraseAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionBodyVariableDeclarationPhrase(OperationDefinitionBodyVariableDeclarationPhrase object)
      {
        return createOperationDefinitionBodyVariableDeclarationPhraseAdapter();
      }
      @Override
      public Adapter caseOperationDefinitionBodyConditionalStmt(OperationDefinitionBodyConditionalStmt object)
      {
        return createOperationDefinitionBodyConditionalStmtAdapter();
      }
      @Override
      public Adapter caseOperationParameterVariableDeclarationPhrase(OperationParameterVariableDeclarationPhrase object)
      {
        return createOperationParameterVariableDeclarationPhraseAdapter();
      }
      @Override
      public Adapter caseOperationParameterConnectionPhrase(OperationParameterConnectionPhrase object)
      {
        return createOperationParameterConnectionPhraseAdapter();
      }
      @Override
      public Adapter caseOperationParameterConnectionBuiltinRefPhrase(OperationParameterConnectionBuiltinRefPhrase object)
      {
        return createOperationParameterConnectionBuiltinRefPhraseAdapter();
      }
      @Override
      public Adapter caseInstanceRefPhrase(InstanceRefPhrase object)
      {
        return createInstanceRefPhraseAdapter();
      }
      @Override
      public Adapter caseInstanceDirectRefPhrase(InstanceDirectRefPhrase object)
      {
        return createInstanceDirectRefPhraseAdapter();
      }
      @Override
      public Adapter caseInstanceIndirectRefPhrase(InstanceIndirectRefPhrase object)
      {
        return createInstanceIndirectRefPhraseAdapter();
      }
      @Override
      public Adapter caseInstanceBuiltinValuePhrase(InstanceBuiltinValuePhrase object)
      {
        return createInstanceBuiltinValuePhraseAdapter();
      }
      @Override
      public Adapter caseInstanceBuiltinValueIntegerPhrase(InstanceBuiltinValueIntegerPhrase object)
      {
        return createInstanceBuiltinValueIntegerPhraseAdapter();
      }
      @Override
      public Adapter caseInstanceBuiltinValueStringPhrase(InstanceBuiltinValueStringPhrase object)
      {
        return createInstanceBuiltinValueStringPhraseAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.Stmt <em>Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.Stmt
   * @generated
   */
  public Adapter createStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceStmt <em>Existence Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceStmt
   * @generated
   */
  public Adapter createExistenceStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceDefiniteStmt <em>Existence Definite Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceDefiniteStmt
   * @generated
   */
  public Adapter createExistenceDefiniteStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceDefinitePhrase <em>Existence Definite Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceDefinitePhrase
   * @generated
   */
  public Adapter createExistenceDefinitePhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceDefiniteRefPhrase <em>Existence Definite Ref Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceDefiniteRefPhrase
   * @generated
   */
  public Adapter createExistenceDefiniteRefPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceDefiniteRefListPhrase <em>Existence Definite Ref List Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceDefiniteRefListPhrase
   * @generated
   */
  public Adapter createExistenceDefiniteRefListPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceIndefiniteStmt <em>Existence Indefinite Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceIndefiniteStmt
   * @generated
   */
  public Adapter createExistenceIndefiniteStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceSingularIndefinitePhrase <em>Existence Singular Indefinite Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceSingularIndefinitePhrase
   * @generated
   */
  public Adapter createExistenceSingularIndefinitePhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistencePluralIndefinitePhrase <em>Existence Plural Indefinite Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistencePluralIndefinitePhrase
   * @generated
   */
  public Adapter createExistencePluralIndefinitePhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceSingularIndefiniteRefPhrase <em>Existence Singular Indefinite Ref Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceSingularIndefiniteRefPhrase
   * @generated
   */
  public Adapter createExistenceSingularIndefiniteRefPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistencePluralIndefiniteRefPhrase <em>Existence Plural Indefinite Ref Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistencePluralIndefiniteRefPhrase
   * @generated
   */
  public Adapter createExistencePluralIndefiniteRefPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceSingularIndefiniteRefListPhrase <em>Existence Singular Indefinite Ref List Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceSingularIndefiniteRefListPhrase
   * @generated
   */
  public Adapter createExistenceSingularIndefiniteRefListPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistencePluralIndefiniteRefListPhrase <em>Existence Plural Indefinite Ref List Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistencePluralIndefiniteRefListPhrase
   * @generated
   */
  public Adapter createExistencePluralIndefiniteRefListPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceSingularRefListPhrase <em>Existence Singular Ref List Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceSingularRefListPhrase
   * @generated
   */
  public Adapter createExistenceSingularRefListPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceAnyRefListPhrase <em>Existence Any Ref List Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceAnyRefListPhrase
   * @generated
   */
  public Adapter createExistenceAnyRefListPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceIndefiniteRefPhrase <em>Existence Indefinite Ref Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceIndefiniteRefPhrase
   * @generated
   */
  public Adapter createExistenceIndefiniteRefPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.ExistenceAnyPhrase <em>Existence Any Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.ExistenceAnyPhrase
   * @generated
   */
  public Adapter createExistenceAnyPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.CompositionStmt <em>Composition Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.CompositionStmt
   * @generated
   */
  public Adapter createCompositionStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.InheritanceStmt <em>Inheritance Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.InheritanceStmt
   * @generated
   */
  public Adapter createInheritanceStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationStmt <em>Operation Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationStmt
   * @generated
   */
  public Adapter createOperationStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDeclarationStmt <em>Operation Declaration Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDeclarationStmt
   * @generated
   */
  public Adapter createOperationDeclarationStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDeclarionHeaderStmt <em>Operation Declarion Header Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDeclarionHeaderStmt
   * @generated
   */
  public Adapter createOperationDeclarionHeaderStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationParameterPhrase <em>Operation Parameter Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationParameterPhrase
   * @generated
   */
  public Adapter createOperationParameterPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionStmt <em>Operation Definition Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionStmt
   * @generated
   */
  public Adapter createOperationDefinitionStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionBodyStmts <em>Operation Definition Body Stmts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionBodyStmts
   * @generated
   */
  public Adapter createOperationDefinitionBodyStmtsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionBodyStmt <em>Operation Definition Body Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionBodyStmt
   * @generated
   */
  public Adapter createOperationDefinitionBodyStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionBodyUnconditionalStmt <em>Operation Definition Body Unconditional Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionBodyUnconditionalStmt
   * @generated
   */
  public Adapter createOperationDefinitionBodyUnconditionalStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionBodyUnconditionalPhrase <em>Operation Definition Body Unconditional Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionBodyUnconditionalPhrase
   * @generated
   */
  public Adapter createOperationDefinitionBodyUnconditionalPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallPhrase <em>Operation Definition Body Function Call Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallPhrase
   * @generated
   */
  public Adapter createOperationDefinitionBodyFunctionCallPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallArgumentsPhrase <em>Operation Definition Body Function Call Arguments Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallArgumentsPhrase
   * @generated
   */
  public Adapter createOperationDefinitionBodyFunctionCallArgumentsPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallInRefsRefPhrase <em>Operation Definition Body Function Call In Refs Ref Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallInRefsRefPhrase
   * @generated
   */
  public Adapter createOperationDefinitionBodyFunctionCallInRefsRefPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallInRefsPhrase <em>Operation Definition Body Function Call In Refs Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallInRefsPhrase
   * @generated
   */
  public Adapter createOperationDefinitionBodyFunctionCallInRefsPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallInRefsObjectsPhrase <em>Operation Definition Body Function Call In Refs Objects Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallInRefsObjectsPhrase
   * @generated
   */
  public Adapter createOperationDefinitionBodyFunctionCallInRefsObjectsPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionBodyVariableDeclarationPhrase <em>Operation Definition Body Variable Declaration Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionBodyVariableDeclarationPhrase
   * @generated
   */
  public Adapter createOperationDefinitionBodyVariableDeclarationPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationDefinitionBodyConditionalStmt <em>Operation Definition Body Conditional Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationDefinitionBodyConditionalStmt
   * @generated
   */
  public Adapter createOperationDefinitionBodyConditionalStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationParameterVariableDeclarationPhrase <em>Operation Parameter Variable Declaration Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationParameterVariableDeclarationPhrase
   * @generated
   */
  public Adapter createOperationParameterVariableDeclarationPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationParameterConnectionPhrase <em>Operation Parameter Connection Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationParameterConnectionPhrase
   * @generated
   */
  public Adapter createOperationParameterConnectionPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.OperationParameterConnectionBuiltinRefPhrase <em>Operation Parameter Connection Builtin Ref Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.OperationParameterConnectionBuiltinRefPhrase
   * @generated
   */
  public Adapter createOperationParameterConnectionBuiltinRefPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.InstanceRefPhrase <em>Instance Ref Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.InstanceRefPhrase
   * @generated
   */
  public Adapter createInstanceRefPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.InstanceDirectRefPhrase <em>Instance Direct Ref Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.InstanceDirectRefPhrase
   * @generated
   */
  public Adapter createInstanceDirectRefPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.InstanceIndirectRefPhrase <em>Instance Indirect Ref Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.InstanceIndirectRefPhrase
   * @generated
   */
  public Adapter createInstanceIndirectRefPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.InstanceBuiltinValuePhrase <em>Instance Builtin Value Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.InstanceBuiltinValuePhrase
   * @generated
   */
  public Adapter createInstanceBuiltinValuePhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.InstanceBuiltinValueIntegerPhrase <em>Instance Builtin Value Integer Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.InstanceBuiltinValueIntegerPhrase
   * @generated
   */
  public Adapter createInstanceBuiltinValueIntegerPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myDsl.InstanceBuiltinValueStringPhrase <em>Instance Builtin Value String Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myDsl.InstanceBuiltinValueStringPhrase
   * @generated
   */
  public Adapter createInstanceBuiltinValueStringPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyDslAdapterFactory
