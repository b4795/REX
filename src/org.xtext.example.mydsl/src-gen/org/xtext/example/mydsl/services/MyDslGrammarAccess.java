/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cStmtAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStmtStmtParserRuleCall_0 = (RuleCall)cStmtAssignment.eContents().get(0);
		
		//Model:
		//    stmt+=Stmt*;
		@Override public ParserRule getRule() { return rule; }
		
		//stmt+=Stmt*
		public Assignment getStmtAssignment() { return cStmtAssignment; }
		
		//Stmt
		public RuleCall getStmtStmtParserRuleCall_0() { return cStmtStmtParserRuleCall_0; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cExistenceStmtParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cCompositionStmtParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cInheritanceStmtParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cOperationStmtParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Stmt:
		//    (ExistenceStmt /*| UnitsStmt*/ | CompositionStmt | InheritanceStmt | OperationStmt) ".";
		@Override public ParserRule getRule() { return rule; }
		
		//(ExistenceStmt /*| UnitsStmt*/ | CompositionStmt | InheritanceStmt | OperationStmt) "."
		public Group getGroup() { return cGroup; }
		
		//(ExistenceStmt /*| UnitsStmt*/ | CompositionStmt | InheritanceStmt | OperationStmt)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ExistenceStmt
		public RuleCall getExistenceStmtParserRuleCall_0_0() { return cExistenceStmtParserRuleCall_0_0; }
		
		//CompositionStmt
		public RuleCall getCompositionStmtParserRuleCall_0_1() { return cCompositionStmtParserRuleCall_0_1; }
		
		//InheritanceStmt
		public RuleCall getInheritanceStmtParserRuleCall_0_2() { return cInheritanceStmtParserRuleCall_0_2; }
		
		//OperationStmt
		public RuleCall getOperationStmtParserRuleCall_0_3() { return cOperationStmtParserRuleCall_0_3; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class ExistenceStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistenceDefiniteStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExistenceIndefiniteStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExistenceStmt:
		//    ExistenceDefiniteStmt | ExistenceIndefiniteStmt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExistenceDefiniteStmt | ExistenceIndefiniteStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExistenceDefiniteStmt
		public RuleCall getExistenceDefiniteStmtParserRuleCall_0() { return cExistenceDefiniteStmtParserRuleCall_0; }
		
		//ExistenceIndefiniteStmt
		public RuleCall getExistenceIndefiniteStmtParserRuleCall_1() { return cExistenceIndefiniteStmtParserRuleCall_1; }
	}
	public class ExistenceDefiniteStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceDefiniteStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThere_is_oneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefiniteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefiniteExistenceDefinitePhraseParserRuleCall_1_0 = (RuleCall)cDefiniteAssignment_1.eContents().get(0);
		
		//ExistenceDefiniteStmt:
		//    "there_is_one" definite=ExistenceDefinitePhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"there_is_one" definite=ExistenceDefinitePhrase
		public Group getGroup() { return cGroup; }
		
		//"there_is_one"
		public Keyword getThere_is_oneKeyword_0() { return cThere_is_oneKeyword_0; }
		
		//definite=ExistenceDefinitePhrase
		public Assignment getDefiniteAssignment_1() { return cDefiniteAssignment_1; }
		
		//ExistenceDefinitePhrase
		public RuleCall getDefiniteExistenceDefinitePhraseParserRuleCall_1_0() { return cDefiniteExistenceDefinitePhraseParserRuleCall_1_0; }
	}
	public class ExistenceDefinitePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceDefinitePhrase");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ExistenceDefinitePhrase:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ExistenceDefiniteRefPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceDefiniteRefPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefExistenceDefinitePhraseCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefExistenceDefinitePhraseIDTerminalRuleCall_1_0_1 = (RuleCall)cRefExistenceDefinitePhraseCrossReference_1_0.eContents().get(1);
		
		//ExistenceDefiniteRefPhrase:
		//    'the' ref=[ExistenceDefinitePhrase]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'the' ref=[ExistenceDefinitePhrase]
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//ref=[ExistenceDefinitePhrase]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[ExistenceDefinitePhrase]
		public CrossReference getRefExistenceDefinitePhraseCrossReference_1_0() { return cRefExistenceDefinitePhraseCrossReference_1_0; }
		
		//ID
		public RuleCall getRefExistenceDefinitePhraseIDTerminalRuleCall_1_0_1() { return cRefExistenceDefinitePhraseIDTerminalRuleCall_1_0_1; }
	}
	public class ExistenceDefiniteRefListPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceDefiniteRefListPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsExistenceDefiniteRefPhraseParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementsExistenceDefiniteRefPhraseParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		
		//ExistenceDefiniteRefListPhrase:
		//    elements+=ExistenceDefiniteRefPhrase ("," "and"? elements+=ExistenceDefiniteRefPhrase)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=ExistenceDefiniteRefPhrase ("," "and"? elements+=ExistenceDefiniteRefPhrase)*
		public Group getGroup() { return cGroup; }
		
		//elements+=ExistenceDefiniteRefPhrase
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//ExistenceDefiniteRefPhrase
		public RuleCall getElementsExistenceDefiniteRefPhraseParserRuleCall_0_0() { return cElementsExistenceDefiniteRefPhraseParserRuleCall_0_0; }
		
		//("," "and"? elements+=ExistenceDefiniteRefPhrase)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//"and"?
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//elements+=ExistenceDefiniteRefPhrase
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }
		
		//ExistenceDefiniteRefPhrase
		public RuleCall getElementsExistenceDefiniteRefPhraseParserRuleCall_1_2_0() { return cElementsExistenceDefiniteRefPhraseParserRuleCall_1_2_0; }
	}
	public class ExistenceIndefiniteStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceIndefiniteStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThere_areKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPluralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPluralExistencePluralIndefinitePhraseParserRuleCall_1_0 = (RuleCall)cPluralAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSingularAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSingularExistenceSingularIndefinitePhraseParserRuleCall_3_0 = (RuleCall)cSingularAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExistenceIndefiniteStmt:
		//    "there_are" plural=ExistencePluralIndefinitePhrase "(" singular=ExistenceSingularIndefinitePhrase ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"there_are" plural=ExistencePluralIndefinitePhrase "(" singular=ExistenceSingularIndefinitePhrase ")"
		public Group getGroup() { return cGroup; }
		
		//"there_are"
		public Keyword getThere_areKeyword_0() { return cThere_areKeyword_0; }
		
		//plural=ExistencePluralIndefinitePhrase
		public Assignment getPluralAssignment_1() { return cPluralAssignment_1; }
		
		//ExistencePluralIndefinitePhrase
		public RuleCall getPluralExistencePluralIndefinitePhraseParserRuleCall_1_0() { return cPluralExistencePluralIndefinitePhraseParserRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//singular=ExistenceSingularIndefinitePhrase
		public Assignment getSingularAssignment_3() { return cSingularAssignment_3; }
		
		//ExistenceSingularIndefinitePhrase
		public RuleCall getSingularExistenceSingularIndefinitePhraseParserRuleCall_3_0() { return cSingularExistenceSingularIndefinitePhraseParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExistenceSingularIndefinitePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceSingularIndefinitePhrase");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ExistenceSingularIndefinitePhrase:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ExistencePluralIndefinitePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistencePluralIndefinitePhrase");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ExistencePluralIndefinitePhrase:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ExistenceSingularIndefiniteRefPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceSingularIndefiniteRefPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cOneKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAnKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefExistenceSingularIndefinitePhraseCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefExistenceSingularIndefinitePhraseIDTerminalRuleCall_1_0_1 = (RuleCall)cRefExistenceSingularIndefinitePhraseCrossReference_1_0.eContents().get(1);
		
		//ExistenceSingularIndefiniteRefPhrase:
		//    ('one' | 'a' | 'an') ref=[ExistenceSingularIndefinitePhrase]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('one' | 'a' | 'an') ref=[ExistenceSingularIndefinitePhrase]
		public Group getGroup() { return cGroup; }
		
		//('one' | 'a' | 'an')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'one'
		public Keyword getOneKeyword_0_0() { return cOneKeyword_0_0; }
		
		//'a'
		public Keyword getAKeyword_0_1() { return cAKeyword_0_1; }
		
		//'an'
		public Keyword getAnKeyword_0_2() { return cAnKeyword_0_2; }
		
		//ref=[ExistenceSingularIndefinitePhrase]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[ExistenceSingularIndefinitePhrase]
		public CrossReference getRefExistenceSingularIndefinitePhraseCrossReference_1_0() { return cRefExistenceSingularIndefinitePhraseCrossReference_1_0; }
		
		//ID
		public RuleCall getRefExistenceSingularIndefinitePhraseIDTerminalRuleCall_1_0_1() { return cRefExistenceSingularIndefinitePhraseIDTerminalRuleCall_1_0_1; }
	}
	public class ExistencePluralIndefiniteRefPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistencePluralIndefiniteRefPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Keyword cOne_or_moreKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cZero_or_moreKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefExistencePluralIndefinitePhraseCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefExistencePluralIndefinitePhraseIDTerminalRuleCall_1_0_1 = (RuleCall)cRefExistencePluralIndefinitePhraseCrossReference_1_0.eContents().get(1);
		
		//ExistencePluralIndefiniteRefPhrase:
		//    (INT | "one_or_more" | "zero_or_more")? ref=[ExistencePluralIndefinitePhrase]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(INT | "one_or_more" | "zero_or_more")? ref=[ExistencePluralIndefinitePhrase]
		public Group getGroup() { return cGroup; }
		
		//(INT | "one_or_more" | "zero_or_more")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//"one_or_more"
		public Keyword getOne_or_moreKeyword_0_1() { return cOne_or_moreKeyword_0_1; }
		
		//"zero_or_more"
		public Keyword getZero_or_moreKeyword_0_2() { return cZero_or_moreKeyword_0_2; }
		
		//ref=[ExistencePluralIndefinitePhrase]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[ExistencePluralIndefinitePhrase]
		public CrossReference getRefExistencePluralIndefinitePhraseCrossReference_1_0() { return cRefExistencePluralIndefinitePhraseCrossReference_1_0; }
		
		//ID
		public RuleCall getRefExistencePluralIndefinitePhraseIDTerminalRuleCall_1_0_1() { return cRefExistencePluralIndefinitePhraseIDTerminalRuleCall_1_0_1; }
	}
	public class ExistenceSingularIndefiniteRefListPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceSingularIndefiniteRefListPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsExistenceSingularIndefiniteRefPhraseParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementsExistenceSingularIndefiniteRefPhraseParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		
		//ExistenceSingularIndefiniteRefListPhrase:
		//    elements+=ExistenceSingularIndefiniteRefPhrase ("," "and"? elements+=ExistenceSingularIndefiniteRefPhrase)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=ExistenceSingularIndefiniteRefPhrase ("," "and"? elements+=ExistenceSingularIndefiniteRefPhrase)*
		public Group getGroup() { return cGroup; }
		
		//elements+=ExistenceSingularIndefiniteRefPhrase
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//ExistenceSingularIndefiniteRefPhrase
		public RuleCall getElementsExistenceSingularIndefiniteRefPhraseParserRuleCall_0_0() { return cElementsExistenceSingularIndefiniteRefPhraseParserRuleCall_0_0; }
		
		//("," "and"? elements+=ExistenceSingularIndefiniteRefPhrase)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//"and"?
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//elements+=ExistenceSingularIndefiniteRefPhrase
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }
		
		//ExistenceSingularIndefiniteRefPhrase
		public RuleCall getElementsExistenceSingularIndefiniteRefPhraseParserRuleCall_1_2_0() { return cElementsExistenceSingularIndefiniteRefPhraseParserRuleCall_1_2_0; }
	}
	public class ExistencePluralIndefiniteRefListPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistencePluralIndefiniteRefListPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsExistencePluralIndefiniteRefPhraseParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementsExistencePluralIndefiniteRefPhraseParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		
		//ExistencePluralIndefiniteRefListPhrase:
		//    elements+=ExistencePluralIndefiniteRefPhrase ("," "and"? elements+=ExistencePluralIndefiniteRefPhrase)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=ExistencePluralIndefiniteRefPhrase ("," "and"? elements+=ExistencePluralIndefiniteRefPhrase)*
		public Group getGroup() { return cGroup; }
		
		//elements+=ExistencePluralIndefiniteRefPhrase
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//ExistencePluralIndefiniteRefPhrase
		public RuleCall getElementsExistencePluralIndefiniteRefPhraseParserRuleCall_0_0() { return cElementsExistencePluralIndefiniteRefPhraseParserRuleCall_0_0; }
		
		//("," "and"? elements+=ExistencePluralIndefiniteRefPhrase)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//"and"?
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//elements+=ExistencePluralIndefiniteRefPhrase
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }
		
		//ExistencePluralIndefiniteRefPhrase
		public RuleCall getElementsExistencePluralIndefiniteRefPhraseParserRuleCall_1_2_0() { return cElementsExistencePluralIndefiniteRefPhraseParserRuleCall_1_2_0; }
	}
	public class ExistenceSingularRefListPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceSingularRefListPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistenceDefiniteRefListPhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExistenceSingularIndefiniteRefListPhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExistenceSingularRefListPhrase:
		//    ExistenceDefiniteRefListPhrase | ExistenceSingularIndefiniteRefListPhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExistenceDefiniteRefListPhrase | ExistenceSingularIndefiniteRefListPhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExistenceDefiniteRefListPhrase
		public RuleCall getExistenceDefiniteRefListPhraseParserRuleCall_0() { return cExistenceDefiniteRefListPhraseParserRuleCall_0; }
		
		//ExistenceSingularIndefiniteRefListPhrase
		public RuleCall getExistenceSingularIndefiniteRefListPhraseParserRuleCall_1() { return cExistenceSingularIndefiniteRefListPhraseParserRuleCall_1; }
	}
	public class ExistenceAnyRefListPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceAnyRefListPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistenceDefiniteRefListPhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExistenceSingularIndefiniteRefListPhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExistencePluralIndefiniteRefListPhraseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExistenceAnyRefListPhrase:
		//    ExistenceDefiniteRefListPhrase | ExistenceSingularIndefiniteRefListPhrase | ExistencePluralIndefiniteRefListPhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExistenceDefiniteRefListPhrase | ExistenceSingularIndefiniteRefListPhrase | ExistencePluralIndefiniteRefListPhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExistenceDefiniteRefListPhrase
		public RuleCall getExistenceDefiniteRefListPhraseParserRuleCall_0() { return cExistenceDefiniteRefListPhraseParserRuleCall_0; }
		
		//ExistenceSingularIndefiniteRefListPhrase
		public RuleCall getExistenceSingularIndefiniteRefListPhraseParserRuleCall_1() { return cExistenceSingularIndefiniteRefListPhraseParserRuleCall_1; }
		
		//ExistencePluralIndefiniteRefListPhrase
		public RuleCall getExistencePluralIndefiniteRefListPhraseParserRuleCall_2() { return cExistencePluralIndefiniteRefListPhraseParserRuleCall_2; }
	}
	public class ExistenceIndefiniteRefPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceIndefiniteRefPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistenceSingularIndefiniteRefPhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExistencePluralIndefiniteRefPhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExistenceIndefiniteRefPhrase:
		//    ExistenceSingularIndefiniteRefPhrase | ExistencePluralIndefiniteRefPhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExistenceSingularIndefiniteRefPhrase | ExistencePluralIndefiniteRefPhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExistenceSingularIndefiniteRefPhrase
		public RuleCall getExistenceSingularIndefiniteRefPhraseParserRuleCall_0() { return cExistenceSingularIndefiniteRefPhraseParserRuleCall_0; }
		
		//ExistencePluralIndefiniteRefPhrase
		public RuleCall getExistencePluralIndefiniteRefPhraseParserRuleCall_1() { return cExistencePluralIndefiniteRefPhraseParserRuleCall_1; }
	}
	public class ExistenceAnyPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistenceAnyPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistenceDefinitePhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExistenceSingularIndefinitePhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExistencePluralIndefinitePhraseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExistenceAnyPhrase:
		//    ExistenceDefinitePhrase |
		//    ExistenceSingularIndefinitePhrase |
		//    ExistencePluralIndefinitePhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExistenceDefinitePhrase |
		//ExistenceSingularIndefinitePhrase |
		//ExistencePluralIndefinitePhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExistenceDefinitePhrase
		public RuleCall getExistenceDefinitePhraseParserRuleCall_0() { return cExistenceDefinitePhraseParserRuleCall_0; }
		
		//ExistenceSingularIndefinitePhrase
		public RuleCall getExistenceSingularIndefinitePhraseParserRuleCall_1() { return cExistenceSingularIndefinitePhraseParserRuleCall_1; }
		
		//ExistencePluralIndefinitePhrase
		public RuleCall getExistencePluralIndefinitePhraseParserRuleCall_2() { return cExistencePluralIndefinitePhraseParserRuleCall_2; }
	}
	public class CompositionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CompositionStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParentExistenceSingularRefListPhraseParserRuleCall_0_0 = (RuleCall)cParentAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHasKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cIs_composed_byKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cContainsKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Assignment cChildrenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChildrenExistenceAnyRefListPhraseParserRuleCall_2_0 = (RuleCall)cChildrenAssignment_2.eContents().get(0);
		
		////UnitsStmt:
		////    "the_unit_of" class=[ExistenceSingularIndefinitePhrase]
		////    "is" units=UnitsPhrase
		////;
		////
		////UnitsPhrase:
		////    plural=UnitsPluralPhrase "(" singular=UnitsSingularPhrase ")"
		////;
		////
		////UnitsSingularPhrase:
		////    name=ID
		////;
		////
		////UnitsPluralPhrase:
		////    name=ID
		////;
		////
		////UnitsAnyPhrase:
		////    UnitsSingularPhrase |
		////    UnitsPluralPhrase
		////;
		//CompositionStmt:
		//    parent=ExistenceSingularRefListPhrase
		//    ("has" | "is_composed_by" | "contains")
		//    children=ExistenceAnyRefListPhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//parent=ExistenceSingularRefListPhrase
		//("has" | "is_composed_by" | "contains")
		//children=ExistenceAnyRefListPhrase
		public Group getGroup() { return cGroup; }
		
		//parent=ExistenceSingularRefListPhrase
		public Assignment getParentAssignment_0() { return cParentAssignment_0; }
		
		//ExistenceSingularRefListPhrase
		public RuleCall getParentExistenceSingularRefListPhraseParserRuleCall_0_0() { return cParentExistenceSingularRefListPhraseParserRuleCall_0_0; }
		
		//("has" | "is_composed_by" | "contains")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"has"
		public Keyword getHasKeyword_1_0() { return cHasKeyword_1_0; }
		
		//"is_composed_by"
		public Keyword getIs_composed_byKeyword_1_1() { return cIs_composed_byKeyword_1_1; }
		
		//"contains"
		public Keyword getContainsKeyword_1_2() { return cContainsKeyword_1_2; }
		
		//children=ExistenceAnyRefListPhrase
		public Assignment getChildrenAssignment_2() { return cChildrenAssignment_2; }
		
		//ExistenceAnyRefListPhrase
		public RuleCall getChildrenExistenceAnyRefListPhraseParserRuleCall_2_0() { return cChildrenExistenceAnyRefListPhraseParserRuleCall_2_0; }
	}
	public class InheritanceStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InheritanceStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassExistenceSingularRefListPhraseParserRuleCall_0_0 = (RuleCall)cClassAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAre_eachKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cSuperclassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSuperclassExistenceSingularRefListPhraseParserRuleCall_2_0 = (RuleCall)cSuperclassAssignment_2.eContents().get(0);
		
		//InheritanceStmt:
		//    class=ExistenceSingularRefListPhrase
		//    ('is' | 'are_each')
		//    superclass=ExistenceSingularRefListPhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//class=ExistenceSingularRefListPhrase
		//('is' | 'are_each')
		//superclass=ExistenceSingularRefListPhrase
		public Group getGroup() { return cGroup; }
		
		//class=ExistenceSingularRefListPhrase
		public Assignment getClassAssignment_0() { return cClassAssignment_0; }
		
		//ExistenceSingularRefListPhrase
		public RuleCall getClassExistenceSingularRefListPhraseParserRuleCall_0_0() { return cClassExistenceSingularRefListPhraseParserRuleCall_0_0; }
		
		//('is' | 'are_each')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//'are_each'
		public Keyword getAre_eachKeyword_1_1() { return cAre_eachKeyword_1_1; }
		
		//superclass=ExistenceSingularRefListPhrase
		public Assignment getSuperclassAssignment_2() { return cSuperclassAssignment_2; }
		
		//ExistenceSingularRefListPhrase
		public RuleCall getSuperclassExistenceSingularRefListPhraseParserRuleCall_2_0() { return cSuperclassExistenceSingularRefListPhraseParserRuleCall_2_0; }
	}
	public class OperationStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationDeclarationStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationDefinitionStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationStmt:
		//    OperationDeclarationStmt |
		//    OperationDefinitionStmt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationDeclarationStmt |
		//OperationDefinitionStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationDeclarationStmt
		public RuleCall getOperationDeclarationStmtParserRuleCall_0() { return cOperationDeclarationStmtParserRuleCall_0; }
		
		//OperationDefinitionStmt
		public RuleCall getOperationDefinitionStmtParserRuleCall_1() { return cOperationDefinitionStmtParserRuleCall_1; }
	}
	public class OperationDeclarationStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDeclarationStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIt_is_possible_thatKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cIt_is_possible_toKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cIt_is_possibleKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final RuleCall cOperationDeclarionHeaderStmtParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//OperationDeclarationStmt:
		//    ('it_is_possible_that'|'it_is_possible_to'|'it_is_possible')
		//        OperationDeclarionHeaderStmt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('it_is_possible_that'|'it_is_possible_to'|'it_is_possible')
		//    OperationDeclarionHeaderStmt
		public Group getGroup() { return cGroup; }
		
		//('it_is_possible_that'|'it_is_possible_to'|'it_is_possible')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'it_is_possible_that'
		public Keyword getIt_is_possible_thatKeyword_0_0() { return cIt_is_possible_thatKeyword_0_0; }
		
		//'it_is_possible_to'
		public Keyword getIt_is_possible_toKeyword_0_1() { return cIt_is_possible_toKeyword_0_1; }
		
		//'it_is_possible'
		public Keyword getIt_is_possibleKeyword_0_2() { return cIt_is_possibleKeyword_0_2; }
		
		//OperationDeclarionHeaderStmt
		public RuleCall getOperationDeclarionHeaderStmtParserRuleCall_1() { return cOperationDeclarionHeaderStmtParserRuleCall_1; }
	}
	public class OperationDeclarionHeaderStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDeclarionHeaderStmt");
		private final Assignment cParametersAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParametersOperationParameterPhraseParserRuleCall_0 = (RuleCall)cParametersAssignment.eContents().get(0);
		
		//OperationDeclarionHeaderStmt:
		//    parameters+=(OperationParameterPhrase)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=(OperationParameterPhrase)+
		public Assignment getParametersAssignment() { return cParametersAssignment; }
		
		//(OperationParameterPhrase)
		public RuleCall getParametersOperationParameterPhraseParserRuleCall_0() { return cParametersOperationParameterPhraseParserRuleCall_0; }
	}
	public class OperationParameterPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationParameterPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationParameterVariableDeclarationPhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParameterConnectionPhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationParameterPhrase:
		//    OperationParameterVariableDeclarationPhrase |
		//    OperationParameterConnectionPhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationParameterVariableDeclarationPhrase |
		//OperationParameterConnectionPhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationParameterVariableDeclarationPhrase
		public RuleCall getOperationParameterVariableDeclarationPhraseParserRuleCall_0() { return cOperationParameterVariableDeclarationPhraseParserRuleCall_0; }
		
		//OperationParameterConnectionPhrase
		public RuleCall getOperationParameterConnectionPhraseParserRuleCall_1() { return cOperationParameterConnectionPhraseParserRuleCall_1; }
	}
	public class OperationDefinitionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeaderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeaderOperationDeclarionHeaderStmtParserRuleCall_1_0 = (RuleCall)cHeaderAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyOperationDefinitionBodyStmtsParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//OperationDefinitionStmt:
		//    'if' header=OperationDeclarionHeaderStmt ','
		//        'then' body=OperationDefinitionBodyStmts
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' header=OperationDeclarionHeaderStmt ','
		//    'then' body=OperationDefinitionBodyStmts
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//header=OperationDeclarionHeaderStmt
		public Assignment getHeaderAssignment_1() { return cHeaderAssignment_1; }
		
		//OperationDeclarionHeaderStmt
		public RuleCall getHeaderOperationDeclarionHeaderStmtParserRuleCall_1_0() { return cHeaderOperationDeclarionHeaderStmtParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//body=OperationDefinitionBodyStmts
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//OperationDefinitionBodyStmts
		public RuleCall getBodyOperationDefinitionBodyStmtsParserRuleCall_4_0() { return cBodyOperationDefinitionBodyStmtsParserRuleCall_4_0; }
	}
	public class OperationDefinitionBodyStmtsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionBodyStmts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStmtsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStmtsOperationDefinitionBodyStmtParserRuleCall_0_0 = (RuleCall)cStmtsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStmtsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStmtsOperationDefinitionBodyStmtParserRuleCall_1_1_0 = (RuleCall)cStmtsAssignment_1_1.eContents().get(0);
		
		//OperationDefinitionBodyStmts:
		//    stmts+=OperationDefinitionBodyStmt (',' stmts+=OperationDefinitionBodyStmt)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//stmts+=OperationDefinitionBodyStmt (',' stmts+=OperationDefinitionBodyStmt)*
		public Group getGroup() { return cGroup; }
		
		//stmts+=OperationDefinitionBodyStmt
		public Assignment getStmtsAssignment_0() { return cStmtsAssignment_0; }
		
		//OperationDefinitionBodyStmt
		public RuleCall getStmtsOperationDefinitionBodyStmtParserRuleCall_0_0() { return cStmtsOperationDefinitionBodyStmtParserRuleCall_0_0; }
		
		//(',' stmts+=OperationDefinitionBodyStmt)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//stmts+=OperationDefinitionBodyStmt
		public Assignment getStmtsAssignment_1_1() { return cStmtsAssignment_1_1; }
		
		//OperationDefinitionBodyStmt
		public RuleCall getStmtsOperationDefinitionBodyStmtParserRuleCall_1_1_0() { return cStmtsOperationDefinitionBodyStmtParserRuleCall_1_1_0; }
	}
	public class OperationDefinitionBodyStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionBodyStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationDefinitionBodyUnconditionalStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationDefinitionBodyConditionalStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationDefinitionBodyStmt:
		//    OperationDefinitionBodyUnconditionalStmt |
		//    OperationDefinitionBodyConditionalStmt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationDefinitionBodyUnconditionalStmt |
		//OperationDefinitionBodyConditionalStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationDefinitionBodyUnconditionalStmt
		public RuleCall getOperationDefinitionBodyUnconditionalStmtParserRuleCall_0() { return cOperationDefinitionBodyUnconditionalStmtParserRuleCall_0; }
		
		//OperationDefinitionBodyConditionalStmt
		public RuleCall getOperationDefinitionBodyConditionalStmtParserRuleCall_1() { return cOperationDefinitionBodyConditionalStmtParserRuleCall_1; }
	}
	public class OperationDefinitionBodyUnconditionalStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionBodyUnconditionalStmt");
		private final RuleCall cOperationDefinitionBodyUnconditionalPhraseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OperationDefinitionBodyUnconditionalStmt:
		//    OperationDefinitionBodyUnconditionalPhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationDefinitionBodyUnconditionalPhrase
		public RuleCall getOperationDefinitionBodyUnconditionalPhraseParserRuleCall() { return cOperationDefinitionBodyUnconditionalPhraseParserRuleCall; }
	}
	public class OperationDefinitionBodyUnconditionalPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionBodyUnconditionalPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationDefinitionBodyFunctionCallPhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationDefinitionBodyVariableDeclarationPhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationDefinitionBodyUnconditionalPhrase:
		//    OperationDefinitionBodyFunctionCallPhrase |
		//    OperationDefinitionBodyVariableDeclarationPhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationDefinitionBodyFunctionCallPhrase |
		//OperationDefinitionBodyVariableDeclarationPhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationDefinitionBodyFunctionCallPhrase
		public RuleCall getOperationDefinitionBodyFunctionCallPhraseParserRuleCall_0() { return cOperationDefinitionBodyFunctionCallPhraseParserRuleCall_0; }
		
		//OperationDefinitionBodyVariableDeclarationPhrase
		public RuleCall getOperationDefinitionBodyVariableDeclarationPhraseParserRuleCall_1() { return cOperationDefinitionBodyVariableDeclarationPhraseParserRuleCall_1; }
	}
	public class OperationDefinitionBodyFunctionCallPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionBodyFunctionCallPhrase");
		private final Assignment cArgumentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArgumentsOperationDefinitionBodyFunctionCallArgumentsPhraseParserRuleCall_0 = (RuleCall)cArgumentsAssignment.eContents().get(0);
		
		//OperationDefinitionBodyFunctionCallPhrase:
		//    arguments+=OperationDefinitionBodyFunctionCallArgumentsPhrase+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//arguments+=OperationDefinitionBodyFunctionCallArgumentsPhrase+
		public Assignment getArgumentsAssignment() { return cArgumentsAssignment; }
		
		//OperationDefinitionBodyFunctionCallArgumentsPhrase
		public RuleCall getArgumentsOperationDefinitionBodyFunctionCallArgumentsPhraseParserRuleCall_0() { return cArgumentsOperationDefinitionBodyFunctionCallArgumentsPhraseParserRuleCall_0; }
	}
	public class OperationDefinitionBodyFunctionCallArgumentsPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionBodyFunctionCallArgumentsPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationDefinitionBodyFunctionCallInRefsRefPhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstanceRefPhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationParameterConnectionBuiltinRefPhraseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OperationDefinitionBodyFunctionCallArgumentsPhrase:
		//    OperationDefinitionBodyFunctionCallInRefsRefPhrase |
		//    InstanceRefPhrase |
		//    OperationParameterConnectionBuiltinRefPhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationDefinitionBodyFunctionCallInRefsRefPhrase |
		//InstanceRefPhrase |
		//OperationParameterConnectionBuiltinRefPhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationDefinitionBodyFunctionCallInRefsRefPhrase
		public RuleCall getOperationDefinitionBodyFunctionCallInRefsRefPhraseParserRuleCall_0() { return cOperationDefinitionBodyFunctionCallInRefsRefPhraseParserRuleCall_0; }
		
		//InstanceRefPhrase
		public RuleCall getInstanceRefPhraseParserRuleCall_1() { return cInstanceRefPhraseParserRuleCall_1; }
		
		//OperationParameterConnectionBuiltinRefPhrase
		public RuleCall getOperationParameterConnectionBuiltinRefPhraseParserRuleCall_2() { return cOperationParameterConnectionBuiltinRefPhraseParserRuleCall_2; }
	}
	public class OperationDefinitionBodyFunctionCallInRefsRefPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionBodyFunctionCallInRefsRefPhrase");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefOperationDefinitionBodyFunctionCallInRefsPhraseCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefOperationDefinitionBodyFunctionCallInRefsPhraseIDTerminalRuleCall_0_1 = (RuleCall)cRefOperationDefinitionBodyFunctionCallInRefsPhraseCrossReference_0.eContents().get(1);
		
		//OperationDefinitionBodyFunctionCallInRefsRefPhrase:
		//    ref=[OperationDefinitionBodyFunctionCallInRefsPhrase]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[OperationDefinitionBodyFunctionCallInRefsPhrase]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[OperationDefinitionBodyFunctionCallInRefsPhrase]
		public CrossReference getRefOperationDefinitionBodyFunctionCallInRefsPhraseCrossReference_0() { return cRefOperationDefinitionBodyFunctionCallInRefsPhraseCrossReference_0; }
		
		//ID
		public RuleCall getRefOperationDefinitionBodyFunctionCallInRefsPhraseIDTerminalRuleCall_0_1() { return cRefOperationDefinitionBodyFunctionCallInRefsPhraseIDTerminalRuleCall_0_1; }
	}
	public class OperationDefinitionBodyFunctionCallInRefsPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionBodyFunctionCallInRefsPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationParameterConnectionPhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationDefinitionBodyFunctionCallInRefsObjectsPhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationDefinitionBodyFunctionCallInRefsPhrase:
		//    OperationParameterConnectionPhrase |
		//    OperationDefinitionBodyFunctionCallInRefsObjectsPhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationParameterConnectionPhrase |
		//OperationDefinitionBodyFunctionCallInRefsObjectsPhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationParameterConnectionPhrase
		public RuleCall getOperationParameterConnectionPhraseParserRuleCall_0() { return cOperationParameterConnectionPhraseParserRuleCall_0; }
		
		//OperationDefinitionBodyFunctionCallInRefsObjectsPhrase
		public RuleCall getOperationDefinitionBodyFunctionCallInRefsObjectsPhraseParserRuleCall_1() { return cOperationDefinitionBodyFunctionCallInRefsObjectsPhraseParserRuleCall_1; }
	}
	public class OperationDefinitionBodyFunctionCallInRefsObjectsPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionBodyFunctionCallInRefsObjectsPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationParameterVariableDeclarationPhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationDefinitionBodyVariableDeclarationPhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationDefinitionBodyFunctionCallInRefsObjectsPhrase:
		//    OperationParameterVariableDeclarationPhrase |
		//    OperationDefinitionBodyVariableDeclarationPhrase;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationParameterVariableDeclarationPhrase |
		//OperationDefinitionBodyVariableDeclarationPhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationParameterVariableDeclarationPhrase
		public RuleCall getOperationParameterVariableDeclarationPhraseParserRuleCall_0() { return cOperationParameterVariableDeclarationPhraseParserRuleCall_0; }
		
		//OperationDefinitionBodyVariableDeclarationPhrase
		public RuleCall getOperationDefinitionBodyVariableDeclarationPhraseParserRuleCall_1() { return cOperationDefinitionBodyVariableDeclarationPhraseParserRuleCall_1; }
	}
	public class OperationDefinitionBodyVariableDeclarationPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionBodyVariableDeclarationPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThere_is_oneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeExistenceSingularIndefinitePhraseCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeExistenceSingularIndefinitePhraseIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeExistenceSingularIndefinitePhraseCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//OperationDefinitionBodyVariableDeclarationPhrase:
		//    'there_is_one' type=[ExistenceSingularIndefinitePhrase] name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'there_is_one' type=[ExistenceSingularIndefinitePhrase] name=ID
		public Group getGroup() { return cGroup; }
		
		//'there_is_one'
		public Keyword getThere_is_oneKeyword_0() { return cThere_is_oneKeyword_0; }
		
		//type=[ExistenceSingularIndefinitePhrase]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[ExistenceSingularIndefinitePhrase]
		public CrossReference getTypeExistenceSingularIndefinitePhraseCrossReference_1_0() { return cTypeExistenceSingularIndefinitePhraseCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeExistenceSingularIndefinitePhraseIDTerminalRuleCall_1_0_1() { return cTypeExistenceSingularIndefinitePhraseIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class OperationDefinitionBodyConditionalStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationDefinitionBodyConditionalStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionOperationDefinitionBodyFunctionCallPhraseParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBodyOperationDefinitionBodyStmtsParserRuleCall_4_0 = (RuleCall)cThenBodyAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cElseKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cElseBodyAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cElseBodyOperationDefinitionBodyStmtsParserRuleCall_5_2_0 = (RuleCall)cElseBodyAssignment_5_2.eContents().get(0);
		
		//OperationDefinitionBodyConditionalStmt:
		//    'if' condition=OperationDefinitionBodyFunctionCallPhrase ','
		//    'then' thenBody=OperationDefinitionBodyStmts
		//    (';' 'else' elseBody=OperationDefinitionBodyStmts)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=OperationDefinitionBodyFunctionCallPhrase ','
		//'then' thenBody=OperationDefinitionBodyStmts
		//(';' 'else' elseBody=OperationDefinitionBodyStmts)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=OperationDefinitionBodyFunctionCallPhrase
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//OperationDefinitionBodyFunctionCallPhrase
		public RuleCall getConditionOperationDefinitionBodyFunctionCallPhraseParserRuleCall_1_0() { return cConditionOperationDefinitionBodyFunctionCallPhraseParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//thenBody=OperationDefinitionBodyStmts
		public Assignment getThenBodyAssignment_4() { return cThenBodyAssignment_4; }
		
		//OperationDefinitionBodyStmts
		public RuleCall getThenBodyOperationDefinitionBodyStmtsParserRuleCall_4_0() { return cThenBodyOperationDefinitionBodyStmtsParserRuleCall_4_0; }
		
		//(';' 'else' elseBody=OperationDefinitionBodyStmts)?
		public Group getGroup_5() { return cGroup_5; }
		
		//';'
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }
		
		//'else'
		public Keyword getElseKeyword_5_1() { return cElseKeyword_5_1; }
		
		//elseBody=OperationDefinitionBodyStmts
		public Assignment getElseBodyAssignment_5_2() { return cElseBodyAssignment_5_2; }
		
		//OperationDefinitionBodyStmts
		public RuleCall getElseBodyOperationDefinitionBodyStmtsParserRuleCall_5_2_0() { return cElseBodyOperationDefinitionBodyStmtsParserRuleCall_5_2_0; }
	}
	public class OperationParameterVariableDeclarationPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationParameterVariableDeclarationPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeExistenceIndefiniteRefPhraseParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//OperationParameterVariableDeclarationPhrase:
		//    type=ExistenceIndefiniteRefPhrase name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ExistenceIndefiniteRefPhrase name=ID
		public Group getGroup() { return cGroup; }
		
		//type=ExistenceIndefiniteRefPhrase
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ExistenceIndefiniteRefPhrase
		public RuleCall getTypeExistenceIndefiniteRefPhraseParserRuleCall_0_0() { return cTypeExistenceIndefiniteRefPhraseParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class OperationParameterConnectionPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationParameterConnectionPhrase");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameIsKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameAndKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameOrKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		
		//OperationParameterConnectionPhrase:
		//    name=(ID|'is'|'and'|'or')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=(ID|'is'|'and'|'or')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//(ID|'is'|'and'|'or')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'is'
		public Keyword getNameIsKeyword_0_1() { return cNameIsKeyword_0_1; }
		
		//'and'
		public Keyword getNameAndKeyword_0_2() { return cNameAndKeyword_0_2; }
		
		//'or'
		public Keyword getNameOrKeyword_0_3() { return cNameOrKeyword_0_3; }
	}
	public class OperationParameterConnectionBuiltinRefPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationParameterConnectionBuiltinRefPhrase");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameIsKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameAndKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameOrKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		
		//OperationParameterConnectionBuiltinRefPhrase:
		//    name=('is'|'and'|'or')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=('is'|'and'|'or')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('is'|'and'|'or')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'is'
		public Keyword getNameIsKeyword_0_0() { return cNameIsKeyword_0_0; }
		
		//'and'
		public Keyword getNameAndKeyword_0_1() { return cNameAndKeyword_0_1; }
		
		//'or'
		public Keyword getNameOrKeyword_0_2() { return cNameOrKeyword_0_2; }
	}
	public class InstanceRefPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InstanceRefPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFInstanceDirectRefPhraseParserRuleCall_0_0 = (RuleCall)cFAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTheKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cClassAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cClassExistenceAnyPhraseCrossReference_1_1_0 = (CrossReference)cClassAssignment_1_1.eContents().get(0);
		private final RuleCall cClassExistenceAnyPhraseIDTerminalRuleCall_1_1_0_1 = (RuleCall)cClassExistenceAnyPhraseCrossReference_1_1_0.eContents().get(1);
		private final Assignment cFAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cFAlternatives_1_2_0 = (Alternatives)cFAssignment_1_2.eContents().get(0);
		private final RuleCall cFInstanceDirectRefPhraseParserRuleCall_1_2_0_0 = (RuleCall)cFAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cFInstanceIndirectRefPhraseParserRuleCall_1_2_0_1 = (RuleCall)cFAlternatives_1_2_0.eContents().get(1);
		
		//InstanceRefPhrase:
		//    f=InstanceDirectRefPhrase |
		//    (
		//        'the' class=[ExistenceAnyPhrase] f=(InstanceDirectRefPhrase|InstanceIndirectRefPhrase)?
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//f=InstanceDirectRefPhrase |
		//(
		//    'the' class=[ExistenceAnyPhrase] f=(InstanceDirectRefPhrase|InstanceIndirectRefPhrase)?
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//f=InstanceDirectRefPhrase
		public Assignment getFAssignment_0() { return cFAssignment_0; }
		
		//InstanceDirectRefPhrase
		public RuleCall getFInstanceDirectRefPhraseParserRuleCall_0_0() { return cFInstanceDirectRefPhraseParserRuleCall_0_0; }
		
		//(
		//    'the' class=[ExistenceAnyPhrase] f=(InstanceDirectRefPhrase|InstanceIndirectRefPhrase)?
		//)
		public Group getGroup_1() { return cGroup_1; }
		
		//'the'
		public Keyword getTheKeyword_1_0() { return cTheKeyword_1_0; }
		
		//class=[ExistenceAnyPhrase]
		public Assignment getClassAssignment_1_1() { return cClassAssignment_1_1; }
		
		//[ExistenceAnyPhrase]
		public CrossReference getClassExistenceAnyPhraseCrossReference_1_1_0() { return cClassExistenceAnyPhraseCrossReference_1_1_0; }
		
		//ID
		public RuleCall getClassExistenceAnyPhraseIDTerminalRuleCall_1_1_0_1() { return cClassExistenceAnyPhraseIDTerminalRuleCall_1_1_0_1; }
		
		//f=(InstanceDirectRefPhrase|InstanceIndirectRefPhrase)?
		public Assignment getFAssignment_1_2() { return cFAssignment_1_2; }
		
		//(InstanceDirectRefPhrase|InstanceIndirectRefPhrase)
		public Alternatives getFAlternatives_1_2_0() { return cFAlternatives_1_2_0; }
		
		//InstanceDirectRefPhrase
		public RuleCall getFInstanceDirectRefPhraseParserRuleCall_1_2_0_0() { return cFInstanceDirectRefPhraseParserRuleCall_1_2_0_0; }
		
		//InstanceIndirectRefPhrase
		public RuleCall getFInstanceIndirectRefPhraseParserRuleCall_1_2_0_1() { return cFInstanceIndirectRefPhraseParserRuleCall_1_2_0_1; }
	}
	public class InstanceDirectRefPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InstanceDirectRefPhrase");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueInstanceBuiltinValuePhraseParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//InstanceDirectRefPhrase:
		//     (value=InstanceBuiltinValuePhrase /*(units=[UnitsAnyPhrase])?*/)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(value=InstanceBuiltinValuePhrase /*(units=[UnitsAnyPhrase])?*/)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//InstanceBuiltinValuePhrase
		public RuleCall getValueInstanceBuiltinValuePhraseParserRuleCall_0() { return cValueInstanceBuiltinValuePhraseParserRuleCall_0; }
	}
	public class InstanceIndirectRefPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InstanceIndirectRefPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParentOperationDefinitionBodyFunctionCallInRefsObjectsPhraseCrossReference_1_0 = (CrossReference)cParentAssignment_1.eContents().get(0);
		private final RuleCall cParentOperationDefinitionBodyFunctionCallInRefsObjectsPhraseIDTerminalRuleCall_1_0_1 = (RuleCall)cParentOperationDefinitionBodyFunctionCallInRefsObjectsPhraseCrossReference_1_0.eContents().get(1);
		
		//InstanceIndirectRefPhrase:
		//    'in' parent=[OperationDefinitionBodyFunctionCallInRefsObjectsPhrase]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'in' parent=[OperationDefinitionBodyFunctionCallInRefsObjectsPhrase]
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//parent=[OperationDefinitionBodyFunctionCallInRefsObjectsPhrase]
		public Assignment getParentAssignment_1() { return cParentAssignment_1; }
		
		//[OperationDefinitionBodyFunctionCallInRefsObjectsPhrase]
		public CrossReference getParentOperationDefinitionBodyFunctionCallInRefsObjectsPhraseCrossReference_1_0() { return cParentOperationDefinitionBodyFunctionCallInRefsObjectsPhraseCrossReference_1_0; }
		
		//ID
		public RuleCall getParentOperationDefinitionBodyFunctionCallInRefsObjectsPhraseIDTerminalRuleCall_1_0_1() { return cParentOperationDefinitionBodyFunctionCallInRefsObjectsPhraseIDTerminalRuleCall_1_0_1; }
	}
	public class InstanceBuiltinValuePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InstanceBuiltinValuePhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstanceBuiltinValueIntegerPhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstanceBuiltinValueStringPhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InstanceBuiltinValuePhrase:
		//    InstanceBuiltinValueIntegerPhrase |
		//    InstanceBuiltinValueStringPhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//InstanceBuiltinValueIntegerPhrase |
		//InstanceBuiltinValueStringPhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InstanceBuiltinValueIntegerPhrase
		public RuleCall getInstanceBuiltinValueIntegerPhraseParserRuleCall_0() { return cInstanceBuiltinValueIntegerPhraseParserRuleCall_0; }
		
		//InstanceBuiltinValueStringPhrase
		public RuleCall getInstanceBuiltinValueStringPhraseParserRuleCall_1() { return cInstanceBuiltinValueStringPhraseParserRuleCall_1; }
	}
	public class InstanceBuiltinValueIntegerPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InstanceBuiltinValueIntegerPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInstanceBuiltinValueIntegerPhraseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVINTTerminalRuleCall_1_0 = (RuleCall)cVAssignment_1.eContents().get(0);
		
		//InstanceBuiltinValueIntegerPhrase:
		//    {InstanceBuiltinValueIntegerPhrase} v=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{InstanceBuiltinValueIntegerPhrase} v=INT
		public Group getGroup() { return cGroup; }
		
		//{InstanceBuiltinValueIntegerPhrase}
		public Action getInstanceBuiltinValueIntegerPhraseAction_0() { return cInstanceBuiltinValueIntegerPhraseAction_0; }
		
		//v=INT
		public Assignment getVAssignment_1() { return cVAssignment_1; }
		
		//INT
		public RuleCall getVINTTerminalRuleCall_1_0() { return cVINTTerminalRuleCall_1_0; }
	}
	public class InstanceBuiltinValueStringPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InstanceBuiltinValueStringPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInstanceBuiltinValueStringPhraseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVSTRINGTerminalRuleCall_1_0 = (RuleCall)cVAssignment_1.eContents().get(0);
		
		//InstanceBuiltinValueStringPhrase:
		//    {InstanceBuiltinValueStringPhrase} v=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{InstanceBuiltinValueStringPhrase} v=STRING
		public Group getGroup() { return cGroup; }
		
		//{InstanceBuiltinValueStringPhrase}
		public Action getInstanceBuiltinValueStringPhraseAction_0() { return cInstanceBuiltinValueStringPhraseAction_0; }
		
		//v=STRING
		public Assignment getVAssignment_1() { return cVAssignment_1; }
		
		//STRING
		public RuleCall getVSTRINGTerminalRuleCall_1_0() { return cVSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final StmtElements pStmt;
	private final ExistenceStmtElements pExistenceStmt;
	private final ExistenceDefiniteStmtElements pExistenceDefiniteStmt;
	private final ExistenceDefinitePhraseElements pExistenceDefinitePhrase;
	private final ExistenceDefiniteRefPhraseElements pExistenceDefiniteRefPhrase;
	private final ExistenceDefiniteRefListPhraseElements pExistenceDefiniteRefListPhrase;
	private final ExistenceIndefiniteStmtElements pExistenceIndefiniteStmt;
	private final ExistenceSingularIndefinitePhraseElements pExistenceSingularIndefinitePhrase;
	private final ExistencePluralIndefinitePhraseElements pExistencePluralIndefinitePhrase;
	private final ExistenceSingularIndefiniteRefPhraseElements pExistenceSingularIndefiniteRefPhrase;
	private final ExistencePluralIndefiniteRefPhraseElements pExistencePluralIndefiniteRefPhrase;
	private final ExistenceSingularIndefiniteRefListPhraseElements pExistenceSingularIndefiniteRefListPhrase;
	private final ExistencePluralIndefiniteRefListPhraseElements pExistencePluralIndefiniteRefListPhrase;
	private final ExistenceSingularRefListPhraseElements pExistenceSingularRefListPhrase;
	private final ExistenceAnyRefListPhraseElements pExistenceAnyRefListPhrase;
	private final ExistenceIndefiniteRefPhraseElements pExistenceIndefiniteRefPhrase;
	private final ExistenceAnyPhraseElements pExistenceAnyPhrase;
	private final CompositionStmtElements pCompositionStmt;
	private final InheritanceStmtElements pInheritanceStmt;
	private final OperationStmtElements pOperationStmt;
	private final OperationDeclarationStmtElements pOperationDeclarationStmt;
	private final OperationDeclarionHeaderStmtElements pOperationDeclarionHeaderStmt;
	private final OperationParameterPhraseElements pOperationParameterPhrase;
	private final OperationDefinitionStmtElements pOperationDefinitionStmt;
	private final OperationDefinitionBodyStmtsElements pOperationDefinitionBodyStmts;
	private final OperationDefinitionBodyStmtElements pOperationDefinitionBodyStmt;
	private final OperationDefinitionBodyUnconditionalStmtElements pOperationDefinitionBodyUnconditionalStmt;
	private final OperationDefinitionBodyUnconditionalPhraseElements pOperationDefinitionBodyUnconditionalPhrase;
	private final OperationDefinitionBodyFunctionCallPhraseElements pOperationDefinitionBodyFunctionCallPhrase;
	private final OperationDefinitionBodyFunctionCallArgumentsPhraseElements pOperationDefinitionBodyFunctionCallArgumentsPhrase;
	private final OperationDefinitionBodyFunctionCallInRefsRefPhraseElements pOperationDefinitionBodyFunctionCallInRefsRefPhrase;
	private final OperationDefinitionBodyFunctionCallInRefsPhraseElements pOperationDefinitionBodyFunctionCallInRefsPhrase;
	private final OperationDefinitionBodyFunctionCallInRefsObjectsPhraseElements pOperationDefinitionBodyFunctionCallInRefsObjectsPhrase;
	private final OperationDefinitionBodyVariableDeclarationPhraseElements pOperationDefinitionBodyVariableDeclarationPhrase;
	private final OperationDefinitionBodyConditionalStmtElements pOperationDefinitionBodyConditionalStmt;
	private final OperationParameterVariableDeclarationPhraseElements pOperationParameterVariableDeclarationPhrase;
	private final OperationParameterConnectionPhraseElements pOperationParameterConnectionPhrase;
	private final OperationParameterConnectionBuiltinRefPhraseElements pOperationParameterConnectionBuiltinRefPhrase;
	private final InstanceRefPhraseElements pInstanceRefPhrase;
	private final InstanceDirectRefPhraseElements pInstanceDirectRefPhrase;
	private final InstanceIndirectRefPhraseElements pInstanceIndirectRefPhrase;
	private final InstanceBuiltinValuePhraseElements pInstanceBuiltinValuePhrase;
	private final InstanceBuiltinValueIntegerPhraseElements pInstanceBuiltinValueIntegerPhrase;
	private final InstanceBuiltinValueStringPhraseElements pInstanceBuiltinValueStringPhrase;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStmt = new StmtElements();
		this.pExistenceStmt = new ExistenceStmtElements();
		this.pExistenceDefiniteStmt = new ExistenceDefiniteStmtElements();
		this.pExistenceDefinitePhrase = new ExistenceDefinitePhraseElements();
		this.pExistenceDefiniteRefPhrase = new ExistenceDefiniteRefPhraseElements();
		this.pExistenceDefiniteRefListPhrase = new ExistenceDefiniteRefListPhraseElements();
		this.pExistenceIndefiniteStmt = new ExistenceIndefiniteStmtElements();
		this.pExistenceSingularIndefinitePhrase = new ExistenceSingularIndefinitePhraseElements();
		this.pExistencePluralIndefinitePhrase = new ExistencePluralIndefinitePhraseElements();
		this.pExistenceSingularIndefiniteRefPhrase = new ExistenceSingularIndefiniteRefPhraseElements();
		this.pExistencePluralIndefiniteRefPhrase = new ExistencePluralIndefiniteRefPhraseElements();
		this.pExistenceSingularIndefiniteRefListPhrase = new ExistenceSingularIndefiniteRefListPhraseElements();
		this.pExistencePluralIndefiniteRefListPhrase = new ExistencePluralIndefiniteRefListPhraseElements();
		this.pExistenceSingularRefListPhrase = new ExistenceSingularRefListPhraseElements();
		this.pExistenceAnyRefListPhrase = new ExistenceAnyRefListPhraseElements();
		this.pExistenceIndefiniteRefPhrase = new ExistenceIndefiniteRefPhraseElements();
		this.pExistenceAnyPhrase = new ExistenceAnyPhraseElements();
		this.pCompositionStmt = new CompositionStmtElements();
		this.pInheritanceStmt = new InheritanceStmtElements();
		this.pOperationStmt = new OperationStmtElements();
		this.pOperationDeclarationStmt = new OperationDeclarationStmtElements();
		this.pOperationDeclarionHeaderStmt = new OperationDeclarionHeaderStmtElements();
		this.pOperationParameterPhrase = new OperationParameterPhraseElements();
		this.pOperationDefinitionStmt = new OperationDefinitionStmtElements();
		this.pOperationDefinitionBodyStmts = new OperationDefinitionBodyStmtsElements();
		this.pOperationDefinitionBodyStmt = new OperationDefinitionBodyStmtElements();
		this.pOperationDefinitionBodyUnconditionalStmt = new OperationDefinitionBodyUnconditionalStmtElements();
		this.pOperationDefinitionBodyUnconditionalPhrase = new OperationDefinitionBodyUnconditionalPhraseElements();
		this.pOperationDefinitionBodyFunctionCallPhrase = new OperationDefinitionBodyFunctionCallPhraseElements();
		this.pOperationDefinitionBodyFunctionCallArgumentsPhrase = new OperationDefinitionBodyFunctionCallArgumentsPhraseElements();
		this.pOperationDefinitionBodyFunctionCallInRefsRefPhrase = new OperationDefinitionBodyFunctionCallInRefsRefPhraseElements();
		this.pOperationDefinitionBodyFunctionCallInRefsPhrase = new OperationDefinitionBodyFunctionCallInRefsPhraseElements();
		this.pOperationDefinitionBodyFunctionCallInRefsObjectsPhrase = new OperationDefinitionBodyFunctionCallInRefsObjectsPhraseElements();
		this.pOperationDefinitionBodyVariableDeclarationPhrase = new OperationDefinitionBodyVariableDeclarationPhraseElements();
		this.pOperationDefinitionBodyConditionalStmt = new OperationDefinitionBodyConditionalStmtElements();
		this.pOperationParameterVariableDeclarationPhrase = new OperationParameterVariableDeclarationPhraseElements();
		this.pOperationParameterConnectionPhrase = new OperationParameterConnectionPhraseElements();
		this.pOperationParameterConnectionBuiltinRefPhrase = new OperationParameterConnectionBuiltinRefPhraseElements();
		this.pInstanceRefPhrase = new InstanceRefPhraseElements();
		this.pInstanceDirectRefPhrase = new InstanceDirectRefPhraseElements();
		this.pInstanceIndirectRefPhrase = new InstanceIndirectRefPhraseElements();
		this.pInstanceBuiltinValuePhrase = new InstanceBuiltinValuePhraseElements();
		this.pInstanceBuiltinValueIntegerPhrase = new InstanceBuiltinValueIntegerPhraseElements();
		this.pInstanceBuiltinValueStringPhrase = new InstanceBuiltinValueStringPhraseElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    stmt+=Stmt*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Stmt:
	//    (ExistenceStmt /*| UnitsStmt*/ | CompositionStmt | InheritanceStmt | OperationStmt) ".";
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	//ExistenceStmt:
	//    ExistenceDefiniteStmt | ExistenceIndefiniteStmt
	//;
	public ExistenceStmtElements getExistenceStmtAccess() {
		return pExistenceStmt;
	}
	
	public ParserRule getExistenceStmtRule() {
		return getExistenceStmtAccess().getRule();
	}
	
	//ExistenceDefiniteStmt:
	//    "there_is_one" definite=ExistenceDefinitePhrase
	//;
	public ExistenceDefiniteStmtElements getExistenceDefiniteStmtAccess() {
		return pExistenceDefiniteStmt;
	}
	
	public ParserRule getExistenceDefiniteStmtRule() {
		return getExistenceDefiniteStmtAccess().getRule();
	}
	
	//ExistenceDefinitePhrase:
	//    name=ID
	//;
	public ExistenceDefinitePhraseElements getExistenceDefinitePhraseAccess() {
		return pExistenceDefinitePhrase;
	}
	
	public ParserRule getExistenceDefinitePhraseRule() {
		return getExistenceDefinitePhraseAccess().getRule();
	}
	
	//ExistenceDefiniteRefPhrase:
	//    'the' ref=[ExistenceDefinitePhrase]
	//;
	public ExistenceDefiniteRefPhraseElements getExistenceDefiniteRefPhraseAccess() {
		return pExistenceDefiniteRefPhrase;
	}
	
	public ParserRule getExistenceDefiniteRefPhraseRule() {
		return getExistenceDefiniteRefPhraseAccess().getRule();
	}
	
	//ExistenceDefiniteRefListPhrase:
	//    elements+=ExistenceDefiniteRefPhrase ("," "and"? elements+=ExistenceDefiniteRefPhrase)*
	//;
	public ExistenceDefiniteRefListPhraseElements getExistenceDefiniteRefListPhraseAccess() {
		return pExistenceDefiniteRefListPhrase;
	}
	
	public ParserRule getExistenceDefiniteRefListPhraseRule() {
		return getExistenceDefiniteRefListPhraseAccess().getRule();
	}
	
	//ExistenceIndefiniteStmt:
	//    "there_are" plural=ExistencePluralIndefinitePhrase "(" singular=ExistenceSingularIndefinitePhrase ")"
	//;
	public ExistenceIndefiniteStmtElements getExistenceIndefiniteStmtAccess() {
		return pExistenceIndefiniteStmt;
	}
	
	public ParserRule getExistenceIndefiniteStmtRule() {
		return getExistenceIndefiniteStmtAccess().getRule();
	}
	
	//ExistenceSingularIndefinitePhrase:
	//    name=ID
	//;
	public ExistenceSingularIndefinitePhraseElements getExistenceSingularIndefinitePhraseAccess() {
		return pExistenceSingularIndefinitePhrase;
	}
	
	public ParserRule getExistenceSingularIndefinitePhraseRule() {
		return getExistenceSingularIndefinitePhraseAccess().getRule();
	}
	
	//ExistencePluralIndefinitePhrase:
	//    name=ID
	//;
	public ExistencePluralIndefinitePhraseElements getExistencePluralIndefinitePhraseAccess() {
		return pExistencePluralIndefinitePhrase;
	}
	
	public ParserRule getExistencePluralIndefinitePhraseRule() {
		return getExistencePluralIndefinitePhraseAccess().getRule();
	}
	
	//ExistenceSingularIndefiniteRefPhrase:
	//    ('one' | 'a' | 'an') ref=[ExistenceSingularIndefinitePhrase]
	//;
	public ExistenceSingularIndefiniteRefPhraseElements getExistenceSingularIndefiniteRefPhraseAccess() {
		return pExistenceSingularIndefiniteRefPhrase;
	}
	
	public ParserRule getExistenceSingularIndefiniteRefPhraseRule() {
		return getExistenceSingularIndefiniteRefPhraseAccess().getRule();
	}
	
	//ExistencePluralIndefiniteRefPhrase:
	//    (INT | "one_or_more" | "zero_or_more")? ref=[ExistencePluralIndefinitePhrase]
	//;
	public ExistencePluralIndefiniteRefPhraseElements getExistencePluralIndefiniteRefPhraseAccess() {
		return pExistencePluralIndefiniteRefPhrase;
	}
	
	public ParserRule getExistencePluralIndefiniteRefPhraseRule() {
		return getExistencePluralIndefiniteRefPhraseAccess().getRule();
	}
	
	//ExistenceSingularIndefiniteRefListPhrase:
	//    elements+=ExistenceSingularIndefiniteRefPhrase ("," "and"? elements+=ExistenceSingularIndefiniteRefPhrase)*
	//;
	public ExistenceSingularIndefiniteRefListPhraseElements getExistenceSingularIndefiniteRefListPhraseAccess() {
		return pExistenceSingularIndefiniteRefListPhrase;
	}
	
	public ParserRule getExistenceSingularIndefiniteRefListPhraseRule() {
		return getExistenceSingularIndefiniteRefListPhraseAccess().getRule();
	}
	
	//ExistencePluralIndefiniteRefListPhrase:
	//    elements+=ExistencePluralIndefiniteRefPhrase ("," "and"? elements+=ExistencePluralIndefiniteRefPhrase)*
	//;
	public ExistencePluralIndefiniteRefListPhraseElements getExistencePluralIndefiniteRefListPhraseAccess() {
		return pExistencePluralIndefiniteRefListPhrase;
	}
	
	public ParserRule getExistencePluralIndefiniteRefListPhraseRule() {
		return getExistencePluralIndefiniteRefListPhraseAccess().getRule();
	}
	
	//ExistenceSingularRefListPhrase:
	//    ExistenceDefiniteRefListPhrase | ExistenceSingularIndefiniteRefListPhrase
	//;
	public ExistenceSingularRefListPhraseElements getExistenceSingularRefListPhraseAccess() {
		return pExistenceSingularRefListPhrase;
	}
	
	public ParserRule getExistenceSingularRefListPhraseRule() {
		return getExistenceSingularRefListPhraseAccess().getRule();
	}
	
	//ExistenceAnyRefListPhrase:
	//    ExistenceDefiniteRefListPhrase | ExistenceSingularIndefiniteRefListPhrase | ExistencePluralIndefiniteRefListPhrase
	//;
	public ExistenceAnyRefListPhraseElements getExistenceAnyRefListPhraseAccess() {
		return pExistenceAnyRefListPhrase;
	}
	
	public ParserRule getExistenceAnyRefListPhraseRule() {
		return getExistenceAnyRefListPhraseAccess().getRule();
	}
	
	//ExistenceIndefiniteRefPhrase:
	//    ExistenceSingularIndefiniteRefPhrase | ExistencePluralIndefiniteRefPhrase
	//;
	public ExistenceIndefiniteRefPhraseElements getExistenceIndefiniteRefPhraseAccess() {
		return pExistenceIndefiniteRefPhrase;
	}
	
	public ParserRule getExistenceIndefiniteRefPhraseRule() {
		return getExistenceIndefiniteRefPhraseAccess().getRule();
	}
	
	//ExistenceAnyPhrase:
	//    ExistenceDefinitePhrase |
	//    ExistenceSingularIndefinitePhrase |
	//    ExistencePluralIndefinitePhrase
	//;
	public ExistenceAnyPhraseElements getExistenceAnyPhraseAccess() {
		return pExistenceAnyPhrase;
	}
	
	public ParserRule getExistenceAnyPhraseRule() {
		return getExistenceAnyPhraseAccess().getRule();
	}
	
	////UnitsStmt:
	////    "the_unit_of" class=[ExistenceSingularIndefinitePhrase]
	////    "is" units=UnitsPhrase
	////;
	////
	////UnitsPhrase:
	////    plural=UnitsPluralPhrase "(" singular=UnitsSingularPhrase ")"
	////;
	////
	////UnitsSingularPhrase:
	////    name=ID
	////;
	////
	////UnitsPluralPhrase:
	////    name=ID
	////;
	////
	////UnitsAnyPhrase:
	////    UnitsSingularPhrase |
	////    UnitsPluralPhrase
	////;
	//CompositionStmt:
	//    parent=ExistenceSingularRefListPhrase
	//    ("has" | "is_composed_by" | "contains")
	//    children=ExistenceAnyRefListPhrase
	//;
	public CompositionStmtElements getCompositionStmtAccess() {
		return pCompositionStmt;
	}
	
	public ParserRule getCompositionStmtRule() {
		return getCompositionStmtAccess().getRule();
	}
	
	//InheritanceStmt:
	//    class=ExistenceSingularRefListPhrase
	//    ('is' | 'are_each')
	//    superclass=ExistenceSingularRefListPhrase
	//;
	public InheritanceStmtElements getInheritanceStmtAccess() {
		return pInheritanceStmt;
	}
	
	public ParserRule getInheritanceStmtRule() {
		return getInheritanceStmtAccess().getRule();
	}
	
	//OperationStmt:
	//    OperationDeclarationStmt |
	//    OperationDefinitionStmt
	//;
	public OperationStmtElements getOperationStmtAccess() {
		return pOperationStmt;
	}
	
	public ParserRule getOperationStmtRule() {
		return getOperationStmtAccess().getRule();
	}
	
	//OperationDeclarationStmt:
	//    ('it_is_possible_that'|'it_is_possible_to'|'it_is_possible')
	//        OperationDeclarionHeaderStmt
	//;
	public OperationDeclarationStmtElements getOperationDeclarationStmtAccess() {
		return pOperationDeclarationStmt;
	}
	
	public ParserRule getOperationDeclarationStmtRule() {
		return getOperationDeclarationStmtAccess().getRule();
	}
	
	//OperationDeclarionHeaderStmt:
	//    parameters+=(OperationParameterPhrase)+
	//;
	public OperationDeclarionHeaderStmtElements getOperationDeclarionHeaderStmtAccess() {
		return pOperationDeclarionHeaderStmt;
	}
	
	public ParserRule getOperationDeclarionHeaderStmtRule() {
		return getOperationDeclarionHeaderStmtAccess().getRule();
	}
	
	//OperationParameterPhrase:
	//    OperationParameterVariableDeclarationPhrase |
	//    OperationParameterConnectionPhrase
	//;
	public OperationParameterPhraseElements getOperationParameterPhraseAccess() {
		return pOperationParameterPhrase;
	}
	
	public ParserRule getOperationParameterPhraseRule() {
		return getOperationParameterPhraseAccess().getRule();
	}
	
	//OperationDefinitionStmt:
	//    'if' header=OperationDeclarionHeaderStmt ','
	//        'then' body=OperationDefinitionBodyStmts
	//;
	public OperationDefinitionStmtElements getOperationDefinitionStmtAccess() {
		return pOperationDefinitionStmt;
	}
	
	public ParserRule getOperationDefinitionStmtRule() {
		return getOperationDefinitionStmtAccess().getRule();
	}
	
	//OperationDefinitionBodyStmts:
	//    stmts+=OperationDefinitionBodyStmt (',' stmts+=OperationDefinitionBodyStmt)*
	//;
	public OperationDefinitionBodyStmtsElements getOperationDefinitionBodyStmtsAccess() {
		return pOperationDefinitionBodyStmts;
	}
	
	public ParserRule getOperationDefinitionBodyStmtsRule() {
		return getOperationDefinitionBodyStmtsAccess().getRule();
	}
	
	//OperationDefinitionBodyStmt:
	//    OperationDefinitionBodyUnconditionalStmt |
	//    OperationDefinitionBodyConditionalStmt
	//;
	public OperationDefinitionBodyStmtElements getOperationDefinitionBodyStmtAccess() {
		return pOperationDefinitionBodyStmt;
	}
	
	public ParserRule getOperationDefinitionBodyStmtRule() {
		return getOperationDefinitionBodyStmtAccess().getRule();
	}
	
	//OperationDefinitionBodyUnconditionalStmt:
	//    OperationDefinitionBodyUnconditionalPhrase
	//;
	public OperationDefinitionBodyUnconditionalStmtElements getOperationDefinitionBodyUnconditionalStmtAccess() {
		return pOperationDefinitionBodyUnconditionalStmt;
	}
	
	public ParserRule getOperationDefinitionBodyUnconditionalStmtRule() {
		return getOperationDefinitionBodyUnconditionalStmtAccess().getRule();
	}
	
	//OperationDefinitionBodyUnconditionalPhrase:
	//    OperationDefinitionBodyFunctionCallPhrase |
	//    OperationDefinitionBodyVariableDeclarationPhrase
	//;
	public OperationDefinitionBodyUnconditionalPhraseElements getOperationDefinitionBodyUnconditionalPhraseAccess() {
		return pOperationDefinitionBodyUnconditionalPhrase;
	}
	
	public ParserRule getOperationDefinitionBodyUnconditionalPhraseRule() {
		return getOperationDefinitionBodyUnconditionalPhraseAccess().getRule();
	}
	
	//OperationDefinitionBodyFunctionCallPhrase:
	//    arguments+=OperationDefinitionBodyFunctionCallArgumentsPhrase+
	//;
	public OperationDefinitionBodyFunctionCallPhraseElements getOperationDefinitionBodyFunctionCallPhraseAccess() {
		return pOperationDefinitionBodyFunctionCallPhrase;
	}
	
	public ParserRule getOperationDefinitionBodyFunctionCallPhraseRule() {
		return getOperationDefinitionBodyFunctionCallPhraseAccess().getRule();
	}
	
	//OperationDefinitionBodyFunctionCallArgumentsPhrase:
	//    OperationDefinitionBodyFunctionCallInRefsRefPhrase |
	//    InstanceRefPhrase |
	//    OperationParameterConnectionBuiltinRefPhrase
	//;
	public OperationDefinitionBodyFunctionCallArgumentsPhraseElements getOperationDefinitionBodyFunctionCallArgumentsPhraseAccess() {
		return pOperationDefinitionBodyFunctionCallArgumentsPhrase;
	}
	
	public ParserRule getOperationDefinitionBodyFunctionCallArgumentsPhraseRule() {
		return getOperationDefinitionBodyFunctionCallArgumentsPhraseAccess().getRule();
	}
	
	//OperationDefinitionBodyFunctionCallInRefsRefPhrase:
	//    ref=[OperationDefinitionBodyFunctionCallInRefsPhrase]
	//;
	public OperationDefinitionBodyFunctionCallInRefsRefPhraseElements getOperationDefinitionBodyFunctionCallInRefsRefPhraseAccess() {
		return pOperationDefinitionBodyFunctionCallInRefsRefPhrase;
	}
	
	public ParserRule getOperationDefinitionBodyFunctionCallInRefsRefPhraseRule() {
		return getOperationDefinitionBodyFunctionCallInRefsRefPhraseAccess().getRule();
	}
	
	//OperationDefinitionBodyFunctionCallInRefsPhrase:
	//    OperationParameterConnectionPhrase |
	//    OperationDefinitionBodyFunctionCallInRefsObjectsPhrase
	//;
	public OperationDefinitionBodyFunctionCallInRefsPhraseElements getOperationDefinitionBodyFunctionCallInRefsPhraseAccess() {
		return pOperationDefinitionBodyFunctionCallInRefsPhrase;
	}
	
	public ParserRule getOperationDefinitionBodyFunctionCallInRefsPhraseRule() {
		return getOperationDefinitionBodyFunctionCallInRefsPhraseAccess().getRule();
	}
	
	//OperationDefinitionBodyFunctionCallInRefsObjectsPhrase:
	//    OperationParameterVariableDeclarationPhrase |
	//    OperationDefinitionBodyVariableDeclarationPhrase;
	public OperationDefinitionBodyFunctionCallInRefsObjectsPhraseElements getOperationDefinitionBodyFunctionCallInRefsObjectsPhraseAccess() {
		return pOperationDefinitionBodyFunctionCallInRefsObjectsPhrase;
	}
	
	public ParserRule getOperationDefinitionBodyFunctionCallInRefsObjectsPhraseRule() {
		return getOperationDefinitionBodyFunctionCallInRefsObjectsPhraseAccess().getRule();
	}
	
	//OperationDefinitionBodyVariableDeclarationPhrase:
	//    'there_is_one' type=[ExistenceSingularIndefinitePhrase] name=ID
	//;
	public OperationDefinitionBodyVariableDeclarationPhraseElements getOperationDefinitionBodyVariableDeclarationPhraseAccess() {
		return pOperationDefinitionBodyVariableDeclarationPhrase;
	}
	
	public ParserRule getOperationDefinitionBodyVariableDeclarationPhraseRule() {
		return getOperationDefinitionBodyVariableDeclarationPhraseAccess().getRule();
	}
	
	//OperationDefinitionBodyConditionalStmt:
	//    'if' condition=OperationDefinitionBodyFunctionCallPhrase ','
	//    'then' thenBody=OperationDefinitionBodyStmts
	//    (';' 'else' elseBody=OperationDefinitionBodyStmts)?
	//;
	public OperationDefinitionBodyConditionalStmtElements getOperationDefinitionBodyConditionalStmtAccess() {
		return pOperationDefinitionBodyConditionalStmt;
	}
	
	public ParserRule getOperationDefinitionBodyConditionalStmtRule() {
		return getOperationDefinitionBodyConditionalStmtAccess().getRule();
	}
	
	//OperationParameterVariableDeclarationPhrase:
	//    type=ExistenceIndefiniteRefPhrase name=ID
	//;
	public OperationParameterVariableDeclarationPhraseElements getOperationParameterVariableDeclarationPhraseAccess() {
		return pOperationParameterVariableDeclarationPhrase;
	}
	
	public ParserRule getOperationParameterVariableDeclarationPhraseRule() {
		return getOperationParameterVariableDeclarationPhraseAccess().getRule();
	}
	
	//OperationParameterConnectionPhrase:
	//    name=(ID|'is'|'and'|'or')
	//;
	public OperationParameterConnectionPhraseElements getOperationParameterConnectionPhraseAccess() {
		return pOperationParameterConnectionPhrase;
	}
	
	public ParserRule getOperationParameterConnectionPhraseRule() {
		return getOperationParameterConnectionPhraseAccess().getRule();
	}
	
	//OperationParameterConnectionBuiltinRefPhrase:
	//    name=('is'|'and'|'or')
	//;
	public OperationParameterConnectionBuiltinRefPhraseElements getOperationParameterConnectionBuiltinRefPhraseAccess() {
		return pOperationParameterConnectionBuiltinRefPhrase;
	}
	
	public ParserRule getOperationParameterConnectionBuiltinRefPhraseRule() {
		return getOperationParameterConnectionBuiltinRefPhraseAccess().getRule();
	}
	
	//InstanceRefPhrase:
	//    f=InstanceDirectRefPhrase |
	//    (
	//        'the' class=[ExistenceAnyPhrase] f=(InstanceDirectRefPhrase|InstanceIndirectRefPhrase)?
	//    )
	//;
	public InstanceRefPhraseElements getInstanceRefPhraseAccess() {
		return pInstanceRefPhrase;
	}
	
	public ParserRule getInstanceRefPhraseRule() {
		return getInstanceRefPhraseAccess().getRule();
	}
	
	//InstanceDirectRefPhrase:
	//     (value=InstanceBuiltinValuePhrase /*(units=[UnitsAnyPhrase])?*/)
	//;
	public InstanceDirectRefPhraseElements getInstanceDirectRefPhraseAccess() {
		return pInstanceDirectRefPhrase;
	}
	
	public ParserRule getInstanceDirectRefPhraseRule() {
		return getInstanceDirectRefPhraseAccess().getRule();
	}
	
	//InstanceIndirectRefPhrase:
	//    'in' parent=[OperationDefinitionBodyFunctionCallInRefsObjectsPhrase]
	//;
	public InstanceIndirectRefPhraseElements getInstanceIndirectRefPhraseAccess() {
		return pInstanceIndirectRefPhrase;
	}
	
	public ParserRule getInstanceIndirectRefPhraseRule() {
		return getInstanceIndirectRefPhraseAccess().getRule();
	}
	
	//InstanceBuiltinValuePhrase:
	//    InstanceBuiltinValueIntegerPhrase |
	//    InstanceBuiltinValueStringPhrase
	//;
	public InstanceBuiltinValuePhraseElements getInstanceBuiltinValuePhraseAccess() {
		return pInstanceBuiltinValuePhrase;
	}
	
	public ParserRule getInstanceBuiltinValuePhraseRule() {
		return getInstanceBuiltinValuePhraseAccess().getRule();
	}
	
	//InstanceBuiltinValueIntegerPhrase:
	//    {InstanceBuiltinValueIntegerPhrase} v=INT
	//;
	public InstanceBuiltinValueIntegerPhraseElements getInstanceBuiltinValueIntegerPhraseAccess() {
		return pInstanceBuiltinValueIntegerPhrase;
	}
	
	public ParserRule getInstanceBuiltinValueIntegerPhraseRule() {
		return getInstanceBuiltinValueIntegerPhraseAccess().getRule();
	}
	
	//InstanceBuiltinValueStringPhrase:
	//    {InstanceBuiltinValueStringPhrase} v=STRING
	//;
	public InstanceBuiltinValueStringPhraseElements getInstanceBuiltinValueStringPhraseAccess() {
		return pInstanceBuiltinValueStringPhrase;
	}
	
	public ParserRule getInstanceBuiltinValueStringPhraseRule() {
		return getInstanceBuiltinValueStringPhraseAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
