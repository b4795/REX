/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.CompositionStmt;
import org.xtext.example.mydsl.myDsl.ExistenceDefinitePhrase;
import org.xtext.example.mydsl.myDsl.ExistenceDefiniteRefListPhrase;
import org.xtext.example.mydsl.myDsl.ExistenceDefiniteRefPhrase;
import org.xtext.example.mydsl.myDsl.ExistenceDefiniteStmt;
import org.xtext.example.mydsl.myDsl.ExistenceIndefiniteStmt;
import org.xtext.example.mydsl.myDsl.ExistencePluralIndefinitePhrase;
import org.xtext.example.mydsl.myDsl.ExistencePluralIndefiniteRefListPhrase;
import org.xtext.example.mydsl.myDsl.ExistencePluralIndefiniteRefPhrase;
import org.xtext.example.mydsl.myDsl.ExistenceSingularIndefinitePhrase;
import org.xtext.example.mydsl.myDsl.ExistenceSingularIndefiniteRefListPhrase;
import org.xtext.example.mydsl.myDsl.ExistenceSingularIndefiniteRefPhrase;
import org.xtext.example.mydsl.myDsl.InheritanceStmt;
import org.xtext.example.mydsl.myDsl.InstanceBuiltinValueIntegerPhrase;
import org.xtext.example.mydsl.myDsl.InstanceBuiltinValueStringPhrase;
import org.xtext.example.mydsl.myDsl.InstanceDirectRefPhrase;
import org.xtext.example.mydsl.myDsl.InstanceIndirectRefPhrase;
import org.xtext.example.mydsl.myDsl.InstanceRefPhrase;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.OperationDeclarionHeaderStmt;
import org.xtext.example.mydsl.myDsl.OperationDefinitionBodyConditionalStmt;
import org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallInRefsRefPhrase;
import org.xtext.example.mydsl.myDsl.OperationDefinitionBodyFunctionCallPhrase;
import org.xtext.example.mydsl.myDsl.OperationDefinitionBodyStmts;
import org.xtext.example.mydsl.myDsl.OperationDefinitionBodyVariableDeclarationPhrase;
import org.xtext.example.mydsl.myDsl.OperationDefinitionStmt;
import org.xtext.example.mydsl.myDsl.OperationParameterConnectionBuiltinRefPhrase;
import org.xtext.example.mydsl.myDsl.OperationParameterConnectionPhrase;
import org.xtext.example.mydsl.myDsl.OperationParameterVariableDeclarationPhrase;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.COMPOSITION_STMT:
				sequence_CompositionStmt(context, (CompositionStmt) semanticObject); 
				return; 
			case MyDslPackage.EXISTENCE_DEFINITE_PHRASE:
				sequence_ExistenceDefinitePhrase(context, (ExistenceDefinitePhrase) semanticObject); 
				return; 
			case MyDslPackage.EXISTENCE_DEFINITE_REF_LIST_PHRASE:
				sequence_ExistenceDefiniteRefListPhrase(context, (ExistenceDefiniteRefListPhrase) semanticObject); 
				return; 
			case MyDslPackage.EXISTENCE_DEFINITE_REF_PHRASE:
				sequence_ExistenceDefiniteRefPhrase(context, (ExistenceDefiniteRefPhrase) semanticObject); 
				return; 
			case MyDslPackage.EXISTENCE_DEFINITE_STMT:
				sequence_ExistenceDefiniteStmt(context, (ExistenceDefiniteStmt) semanticObject); 
				return; 
			case MyDslPackage.EXISTENCE_INDEFINITE_STMT:
				sequence_ExistenceIndefiniteStmt(context, (ExistenceIndefiniteStmt) semanticObject); 
				return; 
			case MyDslPackage.EXISTENCE_PLURAL_INDEFINITE_PHRASE:
				sequence_ExistencePluralIndefinitePhrase(context, (ExistencePluralIndefinitePhrase) semanticObject); 
				return; 
			case MyDslPackage.EXISTENCE_PLURAL_INDEFINITE_REF_LIST_PHRASE:
				sequence_ExistencePluralIndefiniteRefListPhrase(context, (ExistencePluralIndefiniteRefListPhrase) semanticObject); 
				return; 
			case MyDslPackage.EXISTENCE_PLURAL_INDEFINITE_REF_PHRASE:
				sequence_ExistencePluralIndefiniteRefPhrase(context, (ExistencePluralIndefiniteRefPhrase) semanticObject); 
				return; 
			case MyDslPackage.EXISTENCE_SINGULAR_INDEFINITE_PHRASE:
				sequence_ExistenceSingularIndefinitePhrase(context, (ExistenceSingularIndefinitePhrase) semanticObject); 
				return; 
			case MyDslPackage.EXISTENCE_SINGULAR_INDEFINITE_REF_LIST_PHRASE:
				sequence_ExistenceSingularIndefiniteRefListPhrase(context, (ExistenceSingularIndefiniteRefListPhrase) semanticObject); 
				return; 
			case MyDslPackage.EXISTENCE_SINGULAR_INDEFINITE_REF_PHRASE:
				sequence_ExistenceSingularIndefiniteRefPhrase(context, (ExistenceSingularIndefiniteRefPhrase) semanticObject); 
				return; 
			case MyDslPackage.INHERITANCE_STMT:
				sequence_InheritanceStmt(context, (InheritanceStmt) semanticObject); 
				return; 
			case MyDslPackage.INSTANCE_BUILTIN_VALUE_INTEGER_PHRASE:
				sequence_InstanceBuiltinValueIntegerPhrase(context, (InstanceBuiltinValueIntegerPhrase) semanticObject); 
				return; 
			case MyDslPackage.INSTANCE_BUILTIN_VALUE_STRING_PHRASE:
				sequence_InstanceBuiltinValueStringPhrase(context, (InstanceBuiltinValueStringPhrase) semanticObject); 
				return; 
			case MyDslPackage.INSTANCE_DIRECT_REF_PHRASE:
				sequence_InstanceDirectRefPhrase(context, (InstanceDirectRefPhrase) semanticObject); 
				return; 
			case MyDslPackage.INSTANCE_INDIRECT_REF_PHRASE:
				sequence_InstanceIndirectRefPhrase(context, (InstanceIndirectRefPhrase) semanticObject); 
				return; 
			case MyDslPackage.INSTANCE_REF_PHRASE:
				sequence_InstanceRefPhrase(context, (InstanceRefPhrase) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_DECLARION_HEADER_STMT:
				sequence_OperationDeclarionHeaderStmt(context, (OperationDeclarionHeaderStmt) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_DEFINITION_BODY_CONDITIONAL_STMT:
				sequence_OperationDefinitionBodyConditionalStmt(context, (OperationDefinitionBodyConditionalStmt) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_REF_PHRASE:
				sequence_OperationDefinitionBodyFunctionCallInRefsRefPhrase(context, (OperationDefinitionBodyFunctionCallInRefsRefPhrase) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_DEFINITION_BODY_FUNCTION_CALL_PHRASE:
				sequence_OperationDefinitionBodyFunctionCallPhrase(context, (OperationDefinitionBodyFunctionCallPhrase) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_DEFINITION_BODY_STMTS:
				sequence_OperationDefinitionBodyStmts(context, (OperationDefinitionBodyStmts) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_DEFINITION_BODY_VARIABLE_DECLARATION_PHRASE:
				sequence_OperationDefinitionBodyVariableDeclarationPhrase(context, (OperationDefinitionBodyVariableDeclarationPhrase) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_DEFINITION_STMT:
				sequence_OperationDefinitionStmt(context, (OperationDefinitionStmt) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_PARAMETER_CONNECTION_BUILTIN_REF_PHRASE:
				sequence_OperationParameterConnectionBuiltinRefPhrase(context, (OperationParameterConnectionBuiltinRefPhrase) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_PARAMETER_CONNECTION_PHRASE:
				sequence_OperationParameterConnectionPhrase(context, (OperationParameterConnectionPhrase) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_PARAMETER_VARIABLE_DECLARATION_PHRASE:
				sequence_OperationParameterVariableDeclarationPhrase(context, (OperationParameterVariableDeclarationPhrase) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Stmt returns CompositionStmt
	 *     CompositionStmt returns CompositionStmt
	 *
	 * Constraint:
	 *     (parent=ExistenceSingularRefListPhrase children=ExistenceAnyRefListPhrase)
	 */
	protected void sequence_CompositionStmt(ISerializationContext context, CompositionStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COMPOSITION_STMT__PARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COMPOSITION_STMT__PARENT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COMPOSITION_STMT__CHILDREN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COMPOSITION_STMT__CHILDREN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompositionStmtAccess().getParentExistenceSingularRefListPhraseParserRuleCall_0_0(), semanticObject.getParent());
		feeder.accept(grammarAccess.getCompositionStmtAccess().getChildrenExistenceAnyRefListPhraseParserRuleCall_2_0(), semanticObject.getChildren());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExistenceDefinitePhrase returns ExistenceDefinitePhrase
	 *     ExistenceAnyPhrase returns ExistenceDefinitePhrase
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ExistenceDefinitePhrase(ISerializationContext context, ExistenceDefinitePhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXISTENCE_ANY_PHRASE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXISTENCE_ANY_PHRASE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistenceDefinitePhraseAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExistenceDefiniteRefListPhrase returns ExistenceDefiniteRefListPhrase
	 *     ExistenceSingularRefListPhrase returns ExistenceDefiniteRefListPhrase
	 *     ExistenceAnyRefListPhrase returns ExistenceDefiniteRefListPhrase
	 *
	 * Constraint:
	 *     (elements+=ExistenceDefiniteRefPhrase elements+=ExistenceDefiniteRefPhrase*)
	 */
	protected void sequence_ExistenceDefiniteRefListPhrase(ISerializationContext context, ExistenceDefiniteRefListPhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExistenceDefiniteRefPhrase returns ExistenceDefiniteRefPhrase
	 *
	 * Constraint:
	 *     ref=[ExistenceDefinitePhrase|ID]
	 */
	protected void sequence_ExistenceDefiniteRefPhrase(ISerializationContext context, ExistenceDefiniteRefPhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXISTENCE_DEFINITE_REF_PHRASE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXISTENCE_DEFINITE_REF_PHRASE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistenceDefiniteRefPhraseAccess().getRefExistenceDefinitePhraseIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyDslPackage.Literals.EXISTENCE_DEFINITE_REF_PHRASE__REF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Stmt returns ExistenceDefiniteStmt
	 *     ExistenceStmt returns ExistenceDefiniteStmt
	 *     ExistenceDefiniteStmt returns ExistenceDefiniteStmt
	 *
	 * Constraint:
	 *     definite=ExistenceDefinitePhrase
	 */
	protected void sequence_ExistenceDefiniteStmt(ISerializationContext context, ExistenceDefiniteStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXISTENCE_DEFINITE_STMT__DEFINITE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXISTENCE_DEFINITE_STMT__DEFINITE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistenceDefiniteStmtAccess().getDefiniteExistenceDefinitePhraseParserRuleCall_1_0(), semanticObject.getDefinite());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Stmt returns ExistenceIndefiniteStmt
	 *     ExistenceStmt returns ExistenceIndefiniteStmt
	 *     ExistenceIndefiniteStmt returns ExistenceIndefiniteStmt
	 *
	 * Constraint:
	 *     (plural=ExistencePluralIndefinitePhrase singular=ExistenceSingularIndefinitePhrase)
	 */
	protected void sequence_ExistenceIndefiniteStmt(ISerializationContext context, ExistenceIndefiniteStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXISTENCE_INDEFINITE_STMT__PLURAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXISTENCE_INDEFINITE_STMT__PLURAL));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXISTENCE_INDEFINITE_STMT__SINGULAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXISTENCE_INDEFINITE_STMT__SINGULAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistenceIndefiniteStmtAccess().getPluralExistencePluralIndefinitePhraseParserRuleCall_1_0(), semanticObject.getPlural());
		feeder.accept(grammarAccess.getExistenceIndefiniteStmtAccess().getSingularExistenceSingularIndefinitePhraseParserRuleCall_3_0(), semanticObject.getSingular());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExistencePluralIndefinitePhrase returns ExistencePluralIndefinitePhrase
	 *     ExistenceAnyPhrase returns ExistencePluralIndefinitePhrase
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ExistencePluralIndefinitePhrase(ISerializationContext context, ExistencePluralIndefinitePhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXISTENCE_ANY_PHRASE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXISTENCE_ANY_PHRASE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistencePluralIndefinitePhraseAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExistencePluralIndefiniteRefListPhrase returns ExistencePluralIndefiniteRefListPhrase
	 *     ExistenceAnyRefListPhrase returns ExistencePluralIndefiniteRefListPhrase
	 *
	 * Constraint:
	 *     (elements+=ExistencePluralIndefiniteRefPhrase elements+=ExistencePluralIndefiniteRefPhrase*)
	 */
	protected void sequence_ExistencePluralIndefiniteRefListPhrase(ISerializationContext context, ExistencePluralIndefiniteRefListPhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExistencePluralIndefiniteRefPhrase returns ExistencePluralIndefiniteRefPhrase
	 *     ExistenceIndefiniteRefPhrase returns ExistencePluralIndefiniteRefPhrase
	 *
	 * Constraint:
	 *     ref=[ExistencePluralIndefinitePhrase|ID]
	 */
	protected void sequence_ExistencePluralIndefiniteRefPhrase(ISerializationContext context, ExistencePluralIndefiniteRefPhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXISTENCE_PLURAL_INDEFINITE_REF_PHRASE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXISTENCE_PLURAL_INDEFINITE_REF_PHRASE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistencePluralIndefiniteRefPhraseAccess().getRefExistencePluralIndefinitePhraseIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyDslPackage.Literals.EXISTENCE_PLURAL_INDEFINITE_REF_PHRASE__REF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExistenceSingularIndefinitePhrase returns ExistenceSingularIndefinitePhrase
	 *     ExistenceAnyPhrase returns ExistenceSingularIndefinitePhrase
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ExistenceSingularIndefinitePhrase(ISerializationContext context, ExistenceSingularIndefinitePhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXISTENCE_ANY_PHRASE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXISTENCE_ANY_PHRASE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistenceSingularIndefinitePhraseAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExistenceSingularIndefiniteRefListPhrase returns ExistenceSingularIndefiniteRefListPhrase
	 *     ExistenceSingularRefListPhrase returns ExistenceSingularIndefiniteRefListPhrase
	 *     ExistenceAnyRefListPhrase returns ExistenceSingularIndefiniteRefListPhrase
	 *
	 * Constraint:
	 *     (elements+=ExistenceSingularIndefiniteRefPhrase elements+=ExistenceSingularIndefiniteRefPhrase*)
	 */
	protected void sequence_ExistenceSingularIndefiniteRefListPhrase(ISerializationContext context, ExistenceSingularIndefiniteRefListPhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExistenceSingularIndefiniteRefPhrase returns ExistenceSingularIndefiniteRefPhrase
	 *     ExistenceIndefiniteRefPhrase returns ExistenceSingularIndefiniteRefPhrase
	 *
	 * Constraint:
	 *     ref=[ExistenceSingularIndefinitePhrase|ID]
	 */
	protected void sequence_ExistenceSingularIndefiniteRefPhrase(ISerializationContext context, ExistenceSingularIndefiniteRefPhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXISTENCE_SINGULAR_INDEFINITE_REF_PHRASE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXISTENCE_SINGULAR_INDEFINITE_REF_PHRASE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistenceSingularIndefiniteRefPhraseAccess().getRefExistenceSingularIndefinitePhraseIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyDslPackage.Literals.EXISTENCE_SINGULAR_INDEFINITE_REF_PHRASE__REF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Stmt returns InheritanceStmt
	 *     InheritanceStmt returns InheritanceStmt
	 *
	 * Constraint:
	 *     (class=ExistenceSingularRefListPhrase superclass=ExistenceSingularRefListPhrase)
	 */
	protected void sequence_InheritanceStmt(ISerializationContext context, InheritanceStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INHERITANCE_STMT__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INHERITANCE_STMT__CLASS));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INHERITANCE_STMT__SUPERCLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INHERITANCE_STMT__SUPERCLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInheritanceStmtAccess().getClassExistenceSingularRefListPhraseParserRuleCall_0_0(), semanticObject.getClass_());
		feeder.accept(grammarAccess.getInheritanceStmtAccess().getSuperclassExistenceSingularRefListPhraseParserRuleCall_2_0(), semanticObject.getSuperclass());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InstanceBuiltinValuePhrase returns InstanceBuiltinValueIntegerPhrase
	 *     InstanceBuiltinValueIntegerPhrase returns InstanceBuiltinValueIntegerPhrase
	 *
	 * Constraint:
	 *     v=INT
	 */
	protected void sequence_InstanceBuiltinValueIntegerPhrase(ISerializationContext context, InstanceBuiltinValueIntegerPhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INSTANCE_BUILTIN_VALUE_INTEGER_PHRASE__V) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INSTANCE_BUILTIN_VALUE_INTEGER_PHRASE__V));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInstanceBuiltinValueIntegerPhraseAccess().getVINTTerminalRuleCall_1_0(), semanticObject.getV());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InstanceBuiltinValuePhrase returns InstanceBuiltinValueStringPhrase
	 *     InstanceBuiltinValueStringPhrase returns InstanceBuiltinValueStringPhrase
	 *
	 * Constraint:
	 *     v=STRING
	 */
	protected void sequence_InstanceBuiltinValueStringPhrase(ISerializationContext context, InstanceBuiltinValueStringPhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INSTANCE_BUILTIN_VALUE_STRING_PHRASE__V) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INSTANCE_BUILTIN_VALUE_STRING_PHRASE__V));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInstanceBuiltinValueStringPhraseAccess().getVSTRINGTerminalRuleCall_1_0(), semanticObject.getV());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InstanceDirectRefPhrase returns InstanceDirectRefPhrase
	 *
	 * Constraint:
	 *     value=InstanceBuiltinValuePhrase
	 */
	protected void sequence_InstanceDirectRefPhrase(ISerializationContext context, InstanceDirectRefPhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INSTANCE_DIRECT_REF_PHRASE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INSTANCE_DIRECT_REF_PHRASE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInstanceDirectRefPhraseAccess().getValueInstanceBuiltinValuePhraseParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InstanceIndirectRefPhrase returns InstanceIndirectRefPhrase
	 *
	 * Constraint:
	 *     parent=[OperationDefinitionBodyFunctionCallInRefsObjectsPhrase|ID]
	 */
	protected void sequence_InstanceIndirectRefPhrase(ISerializationContext context, InstanceIndirectRefPhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INSTANCE_INDIRECT_REF_PHRASE__PARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INSTANCE_INDIRECT_REF_PHRASE__PARENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInstanceIndirectRefPhraseAccess().getParentOperationDefinitionBodyFunctionCallInRefsObjectsPhraseIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyDslPackage.Literals.INSTANCE_INDIRECT_REF_PHRASE__PARENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OperationDefinitionBodyFunctionCallArgumentsPhrase returns InstanceRefPhrase
	 *     InstanceRefPhrase returns InstanceRefPhrase
	 *
	 * Constraint:
	 *     (f=InstanceDirectRefPhrase | (class=[ExistenceAnyPhrase|ID] (f=InstanceDirectRefPhrase | f=InstanceIndirectRefPhrase)?))
	 */
	protected void sequence_InstanceRefPhrase(ISerializationContext context, InstanceRefPhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     stmt+=Stmt+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stmt returns OperationDeclarionHeaderStmt
	 *     OperationStmt returns OperationDeclarionHeaderStmt
	 *     OperationDeclarationStmt returns OperationDeclarionHeaderStmt
	 *     OperationDeclarionHeaderStmt returns OperationDeclarionHeaderStmt
	 *
	 * Constraint:
	 *     parameters+=OperationParameterPhrase+
	 */
	protected void sequence_OperationDeclarionHeaderStmt(ISerializationContext context, OperationDeclarionHeaderStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationDefinitionBodyStmt returns OperationDefinitionBodyConditionalStmt
	 *     OperationDefinitionBodyConditionalStmt returns OperationDefinitionBodyConditionalStmt
	 *
	 * Constraint:
	 *     (condition=OperationDefinitionBodyFunctionCallPhrase thenBody=OperationDefinitionBodyStmts elseBody=OperationDefinitionBodyStmts?)
	 */
	protected void sequence_OperationDefinitionBodyConditionalStmt(ISerializationContext context, OperationDefinitionBodyConditionalStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationDefinitionBodyFunctionCallArgumentsPhrase returns OperationDefinitionBodyFunctionCallInRefsRefPhrase
	 *     OperationDefinitionBodyFunctionCallInRefsRefPhrase returns OperationDefinitionBodyFunctionCallInRefsRefPhrase
	 *
	 * Constraint:
	 *     ref=[OperationDefinitionBodyFunctionCallInRefsPhrase|ID]
	 */
	protected void sequence_OperationDefinitionBodyFunctionCallInRefsRefPhrase(ISerializationContext context, OperationDefinitionBodyFunctionCallInRefsRefPhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_REF_PHRASE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_REF_PHRASE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationDefinitionBodyFunctionCallInRefsRefPhraseAccess().getRefOperationDefinitionBodyFunctionCallInRefsPhraseIDTerminalRuleCall_0_1(), semanticObject.eGet(MyDslPackage.Literals.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_REF_PHRASE__REF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OperationDefinitionBodyStmt returns OperationDefinitionBodyFunctionCallPhrase
	 *     OperationDefinitionBodyUnconditionalStmt returns OperationDefinitionBodyFunctionCallPhrase
	 *     OperationDefinitionBodyUnconditionalPhrase returns OperationDefinitionBodyFunctionCallPhrase
	 *     OperationDefinitionBodyFunctionCallPhrase returns OperationDefinitionBodyFunctionCallPhrase
	 *
	 * Constraint:
	 *     arguments+=OperationDefinitionBodyFunctionCallArgumentsPhrase+
	 */
	protected void sequence_OperationDefinitionBodyFunctionCallPhrase(ISerializationContext context, OperationDefinitionBodyFunctionCallPhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationDefinitionBodyStmts returns OperationDefinitionBodyStmts
	 *
	 * Constraint:
	 *     (stmts+=OperationDefinitionBodyStmt stmts+=OperationDefinitionBodyStmt*)
	 */
	protected void sequence_OperationDefinitionBodyStmts(ISerializationContext context, OperationDefinitionBodyStmts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationDefinitionBodyStmt returns OperationDefinitionBodyVariableDeclarationPhrase
	 *     OperationDefinitionBodyUnconditionalStmt returns OperationDefinitionBodyVariableDeclarationPhrase
	 *     OperationDefinitionBodyUnconditionalPhrase returns OperationDefinitionBodyVariableDeclarationPhrase
	 *     OperationDefinitionBodyFunctionCallInRefsPhrase returns OperationDefinitionBodyVariableDeclarationPhrase
	 *     OperationDefinitionBodyFunctionCallInRefsObjectsPhrase returns OperationDefinitionBodyVariableDeclarationPhrase
	 *     OperationDefinitionBodyVariableDeclarationPhrase returns OperationDefinitionBodyVariableDeclarationPhrase
	 *
	 * Constraint:
	 *     (type=[ExistenceSingularIndefinitePhrase|ID] name=ID)
	 */
	protected void sequence_OperationDefinitionBodyVariableDeclarationPhrase(ISerializationContext context, OperationDefinitionBodyVariableDeclarationPhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_BODY_VARIABLE_DECLARATION_PHRASE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_BODY_VARIABLE_DECLARATION_PHRASE__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_PHRASE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_PHRASE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationDefinitionBodyVariableDeclarationPhraseAccess().getTypeExistenceSingularIndefinitePhraseIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyDslPackage.Literals.OPERATION_DEFINITION_BODY_VARIABLE_DECLARATION_PHRASE__TYPE, false));
		feeder.accept(grammarAccess.getOperationDefinitionBodyVariableDeclarationPhraseAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Stmt returns OperationDefinitionStmt
	 *     OperationStmt returns OperationDefinitionStmt
	 *     OperationDefinitionStmt returns OperationDefinitionStmt
	 *
	 * Constraint:
	 *     (header=OperationDeclarionHeaderStmt body=OperationDefinitionBodyStmts)
	 */
	protected void sequence_OperationDefinitionStmt(ISerializationContext context, OperationDefinitionStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_STMT__HEADER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_STMT__HEADER));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_STMT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_STMT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationDefinitionStmtAccess().getHeaderOperationDeclarionHeaderStmtParserRuleCall_1_0(), semanticObject.getHeader());
		feeder.accept(grammarAccess.getOperationDefinitionStmtAccess().getBodyOperationDefinitionBodyStmtsParserRuleCall_4_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OperationDefinitionBodyFunctionCallArgumentsPhrase returns OperationParameterConnectionBuiltinRefPhrase
	 *     OperationParameterConnectionBuiltinRefPhrase returns OperationParameterConnectionBuiltinRefPhrase
	 *
	 * Constraint:
	 *     (name='is' | name='and' | name='or')
	 */
	protected void sequence_OperationParameterConnectionBuiltinRefPhrase(ISerializationContext context, OperationParameterConnectionBuiltinRefPhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationParameterPhrase returns OperationParameterConnectionPhrase
	 *     OperationDefinitionBodyFunctionCallInRefsPhrase returns OperationParameterConnectionPhrase
	 *     OperationParameterConnectionPhrase returns OperationParameterConnectionPhrase
	 *
	 * Constraint:
	 *     (name=ID | name='is' | name='and' | name='or')
	 */
	protected void sequence_OperationParameterConnectionPhrase(ISerializationContext context, OperationParameterConnectionPhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationParameterPhrase returns OperationParameterVariableDeclarationPhrase
	 *     OperationDefinitionBodyFunctionCallInRefsPhrase returns OperationParameterVariableDeclarationPhrase
	 *     OperationDefinitionBodyFunctionCallInRefsObjectsPhrase returns OperationParameterVariableDeclarationPhrase
	 *     OperationParameterVariableDeclarationPhrase returns OperationParameterVariableDeclarationPhrase
	 *
	 * Constraint:
	 *     (type=ExistenceIndefiniteRefPhrase name=ID)
	 */
	protected void sequence_OperationParameterVariableDeclarationPhrase(ISerializationContext context, OperationParameterVariableDeclarationPhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OPERATION_PARAMETER_VARIABLE_DECLARATION_PHRASE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OPERATION_PARAMETER_VARIABLE_DECLARATION_PHRASE__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_PHRASE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OPERATION_DEFINITION_BODY_FUNCTION_CALL_IN_REFS_PHRASE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationParameterVariableDeclarationPhraseAccess().getTypeExistenceIndefiniteRefPhraseParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getOperationParameterVariableDeclarationPhraseAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
