/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_CompositionStmt_ContainsKeyword_1_2_or_HasKeyword_1_0_or_Is_composed_byKeyword_1_1;
	protected AbstractElementAlias match_ExistenceDefiniteRefListPhrase_AndKeyword_1_1_q;
	protected AbstractElementAlias match_ExistencePluralIndefiniteRefListPhrase_AndKeyword_1_1_q;
	protected AbstractElementAlias match_ExistencePluralIndefiniteRefPhrase___INTTerminalRuleCall_0_0_or_One_or_moreKeyword_0_1_or_Zero_or_moreKeyword_0_2__q;
	protected AbstractElementAlias match_ExistenceSingularIndefiniteRefListPhrase_AndKeyword_1_1_q;
	protected AbstractElementAlias match_ExistenceSingularIndefiniteRefPhrase_AKeyword_0_1_or_AnKeyword_0_2_or_OneKeyword_0_0;
	protected AbstractElementAlias match_InheritanceStmt_Are_eachKeyword_1_1_or_IsKeyword_1_0;
	protected AbstractElementAlias match_OperationDeclarationStmt_It_is_possibleKeyword_0_2_or_It_is_possible_thatKeyword_0_0_or_It_is_possible_toKeyword_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_CompositionStmt_ContainsKeyword_1_2_or_HasKeyword_1_0_or_Is_composed_byKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCompositionStmtAccess().getContainsKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getCompositionStmtAccess().getHasKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getCompositionStmtAccess().getIs_composed_byKeyword_1_1()));
		match_ExistenceDefiniteRefListPhrase_AndKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getExistenceDefiniteRefListPhraseAccess().getAndKeyword_1_1());
		match_ExistencePluralIndefiniteRefListPhrase_AndKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getExistencePluralIndefiniteRefListPhraseAccess().getAndKeyword_1_1());
		match_ExistencePluralIndefiniteRefPhrase___INTTerminalRuleCall_0_0_or_One_or_moreKeyword_0_1_or_Zero_or_moreKeyword_0_2__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getExistencePluralIndefiniteRefPhraseAccess().getINTTerminalRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getExistencePluralIndefiniteRefPhraseAccess().getOne_or_moreKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getExistencePluralIndefiniteRefPhraseAccess().getZero_or_moreKeyword_0_2()));
		match_ExistenceSingularIndefiniteRefListPhrase_AndKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getExistenceSingularIndefiniteRefListPhraseAccess().getAndKeyword_1_1());
		match_ExistenceSingularIndefiniteRefPhrase_AKeyword_0_1_or_AnKeyword_0_2_or_OneKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExistenceSingularIndefiniteRefPhraseAccess().getAKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getExistenceSingularIndefiniteRefPhraseAccess().getAnKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getExistenceSingularIndefiniteRefPhraseAccess().getOneKeyword_0_0()));
		match_InheritanceStmt_Are_eachKeyword_1_1_or_IsKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getInheritanceStmtAccess().getAre_eachKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getInheritanceStmtAccess().getIsKeyword_1_0()));
		match_OperationDeclarationStmt_It_is_possibleKeyword_0_2_or_It_is_possible_thatKeyword_0_0_or_It_is_possible_toKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOperationDeclarationStmtAccess().getIt_is_possibleKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getOperationDeclarationStmtAccess().getIt_is_possible_thatKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getOperationDeclarationStmtAccess().getIt_is_possible_toKeyword_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_CompositionStmt_ContainsKeyword_1_2_or_HasKeyword_1_0_or_Is_composed_byKeyword_1_1.equals(syntax))
				emit_CompositionStmt_ContainsKeyword_1_2_or_HasKeyword_1_0_or_Is_composed_byKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExistenceDefiniteRefListPhrase_AndKeyword_1_1_q.equals(syntax))
				emit_ExistenceDefiniteRefListPhrase_AndKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExistencePluralIndefiniteRefListPhrase_AndKeyword_1_1_q.equals(syntax))
				emit_ExistencePluralIndefiniteRefListPhrase_AndKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExistencePluralIndefiniteRefPhrase___INTTerminalRuleCall_0_0_or_One_or_moreKeyword_0_1_or_Zero_or_moreKeyword_0_2__q.equals(syntax))
				emit_ExistencePluralIndefiniteRefPhrase___INTTerminalRuleCall_0_0_or_One_or_moreKeyword_0_1_or_Zero_or_moreKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExistenceSingularIndefiniteRefListPhrase_AndKeyword_1_1_q.equals(syntax))
				emit_ExistenceSingularIndefiniteRefListPhrase_AndKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExistenceSingularIndefiniteRefPhrase_AKeyword_0_1_or_AnKeyword_0_2_or_OneKeyword_0_0.equals(syntax))
				emit_ExistenceSingularIndefiniteRefPhrase_AKeyword_0_1_or_AnKeyword_0_2_or_OneKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InheritanceStmt_Are_eachKeyword_1_1_or_IsKeyword_1_0.equals(syntax))
				emit_InheritanceStmt_Are_eachKeyword_1_1_or_IsKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OperationDeclarationStmt_It_is_possibleKeyword_0_2_or_It_is_possible_thatKeyword_0_0_or_It_is_possible_toKeyword_0_1.equals(syntax))
				emit_OperationDeclarationStmt_It_is_possibleKeyword_0_2_or_It_is_possible_thatKeyword_0_0_or_It_is_possible_toKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'has' | 'is_composed_by' | 'contains'
	 *
	 * This ambiguous syntax occurs at:
	 *     parent=ExistenceSingularRefListPhrase (ambiguity) children=ExistenceAnyRefListPhrase
	 */
	protected void emit_CompositionStmt_ContainsKeyword_1_2_or_HasKeyword_1_0_or_Is_composed_byKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'and'?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=ExistenceDefiniteRefPhrase ',' (ambiguity) elements+=ExistenceDefiniteRefPhrase
	 */
	protected void emit_ExistenceDefiniteRefListPhrase_AndKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'and'?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=ExistencePluralIndefiniteRefPhrase ',' (ambiguity) elements+=ExistencePluralIndefiniteRefPhrase
	 */
	protected void emit_ExistencePluralIndefiniteRefListPhrase_AndKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (INT | 'one_or_more' | 'zero_or_more')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ref=[ExistencePluralIndefinitePhrase|ID]
	 */
	protected void emit_ExistencePluralIndefiniteRefPhrase___INTTerminalRuleCall_0_0_or_One_or_moreKeyword_0_1_or_Zero_or_moreKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'and'?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=ExistenceSingularIndefiniteRefPhrase ',' (ambiguity) elements+=ExistenceSingularIndefiniteRefPhrase
	 */
	protected void emit_ExistenceSingularIndefiniteRefListPhrase_AndKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'one' | 'a' | 'an'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ref=[ExistenceSingularIndefinitePhrase|ID]
	 */
	protected void emit_ExistenceSingularIndefiniteRefPhrase_AKeyword_0_1_or_AnKeyword_0_2_or_OneKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'is' | 'are_each'
	 *
	 * This ambiguous syntax occurs at:
	 *     class=ExistenceSingularRefListPhrase (ambiguity) superclass=ExistenceSingularRefListPhrase
	 */
	protected void emit_InheritanceStmt_Are_eachKeyword_1_1_or_IsKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'it_is_possible_that' | 'it_is_possible_to' | 'it_is_possible'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) parameters+=OperationParameterPhrase
	 */
	protected void emit_OperationDeclarationStmt_It_is_possibleKeyword_0_2_or_It_is_possible_thatKeyword_0_0_or_It_is_possible_toKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
